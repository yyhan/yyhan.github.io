{"meta":{"title":"YFHan的博客","subtitle":null,"description":"JUST DO IT","author":"YFHan","url":"https://yyhan.github.io"},"pages":[{"title":"","date":"2017-06-18T12:36:14.688Z","updated":"2016-12-11T15:46:00.021Z","comments":true,"path":"404.html","permalink":"https://yyhan.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2016-12-12T04:20:37.000Z","updated":"2016-12-12T04:30:56.900Z","comments":true,"path":"about/index.html","permalink":"https://yyhan.github.io/about/index.html","excerpt":"","text":"&#x5C0F;&#x5929;&#xFF0C;&#x65E0;&#x77E5;&#x7684;&#x7801;&#x519C; Github: @yyhan"}],"posts":[{"title":"hessian 2.0 序列化协议","slug":"hessian-2-0-序列化协议","date":"2017-06-18T03:05:53.000Z","updated":"2017-06-18T11:36:43.924Z","comments":true,"path":"2017/06/18/hessian-2-0-序列化协议/","link":"","permalink":"https://yyhan.github.io/2017/06/18/hessian-2-0-序列化协议/","excerpt":"","text":"&#x4ECB;&#x7ECD;Hessian is a dynamically-typed, binary serialization and Web Services protocol designed for object-oriented transmission. &#x8BBE;&#x8BA1;&#x76EE;&#x6807;Hessian is dynamically-typed, compact, and portable across languages.The Hessian protocol has the following design goals: It must self-describe the serialized types, i.e. not require external schema or interface definitions. It must be language-independent, including supporting scripting languages. It must be readable or writable in a single pass. It must be as compact as possible. It must be simple so it can be effectively tested and implemented. It must be as fast as possible. It must support Unicode strings. It must support 8-bit binary data without escaping or using attachments. It must support encryption, compression, signature, and transaction context envelopes. Hessian &#x8BED;&#x6CD5;&#x5E8F;&#x5217;&#x5316;&#x8BED;&#x6CD5;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394 # starting productiontop ::= value # 8-bit binary data split into 64k chunksbinary ::= x41 b1 b0 &lt;binary-data&gt; binary # non-final chunk ::= &apos;B&apos; b1 b0 &lt;binary-data&gt; # final chunk ::= [x20-x2f] &lt;binary-data&gt; # binary data of # length 0-15 ::= [x34-x37] &lt;binary-data&gt; # binary data of # length 0-1023 # boolean true/falseboolean ::= &apos;T&apos; ::= &apos;F&apos; # definition for an object (compact map)class-def ::= &apos;C&apos; string int string* # time in UTC encoded as 64-bit long milliseconds since # epochdate ::= x4a b7 b6 b5 b4 b3 b2 b1 b0 ::= x4b b3 b2 b1 b0 # minutes since epoch # 64-bit IEEE doubledouble ::= &apos;D&apos; b7 b6 b5 b4 b3 b2 b1 b0 ::= x5b # 0.0 ::= x5c # 1.0 ::= x5d b0 # byte cast to double # (-128.0 to 127.0) ::= x5e b1 b0 # short cast to double ::= x5f b3 b2 b1 b0 # 32-bit float cast to double # 32-bit signed integerint ::= &apos;I&apos; b3 b2 b1 b0 ::= [x80-xbf] # -x10 to x3f ::= [xc0-xcf] b0 # -x800 to x7ff ::= [xd0-xd7] b1 b0 # -x40000 to x3ffff # list/vectorlist ::= x55 type value* &apos;Z&apos; # variable-length list ::= &apos;V&apos; type int value* # fixed-length list ::= x57 value* &apos;Z&apos; # variable-length untyped list ::= x58 int value* # fixed-length untyped list ::= [x70-77] type value* # fixed-length typed list ::= [x78-7f] value* # fixed-length untyped list # 64-bit signed long integerlong ::= &apos;L&apos; b7 b6 b5 b4 b3 b2 b1 b0 ::= [xd8-xef] # -x08 to x0f ::= [xf0-xff] b0 # -x800 to x7ff ::= [x38-x3f] b1 b0 # -x40000 to x3ffff ::= x59 b3 b2 b1 b0 # 32-bit integer cast to long # map/objectmap ::= &apos;M&apos; type (value value)* &apos;Z&apos; # key, value map pairs ::= &apos;H&apos; (value value)* &apos;Z&apos; # untyped key, value # null valuenull ::= &apos;N&apos; # Object instanceobject ::= &apos;O&apos; int value* ::= [x60-x6f] value* # value reference (e.g. circular trees and graphs)ref ::= x51 int # reference to nth map/list/object # UTF-8 encoded character string split into 64k chunksstring ::= x52 b1 b0 &lt;utf8-data&gt; string # non-final chunk ::= &apos;S&apos; b1 b0 &lt;utf8-data&gt; # string of length # 0-65535 ::= [x00-x1f] &lt;utf8-data&gt; # string of length # 0-31 ::= [x30-x34] &lt;utf8-data&gt; # string of length # 0-1023 # map/list types for OO languagestype ::= string # type name ::= int # type reference # main productionvalue ::= null ::= binary ::= boolean ::= class-def value ::= date ::= double ::= int ::= list ::= long ::= map ::= object ::= ref ::= string &#x5E8F;&#x5217;&#x5316;Hessian&#x2019;s object serialization has 8 primitive types: raw binary data boolean 64-bit millisecond date 64-bit double 32-bit int 64-bit long null UTF8-encoded string It has 3 recursive types: list for lists and arrays map for maps and dictionaries object for objects Finally, it has one special contruct: ref for shared and circular object references. Hessian 2.0 has 3 internal reference maps: An object/list reference map. An class definition reference map. A type (class name) reference map. &#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x8BED;&#x6CD5;123binary ::= b b1 b0 &lt;binary-data&gt; binary ::= B b1 b0 &lt;binary-data&gt; ::= [x20-x2f] &lt;binary-data&gt; Binary data is encoded in chunks. The octet x42 (&#x2018;B&#x2019;) encodes the final chunk and x62 (&#x2018;b&#x2019;) represents any non-final chunk. Each chunk has a 16-bit length value. len = 256 * b1 + b0 &#x538B;&#x7F29;&#x77ED;&#x4E8C;&#x8FDB;&#x5236;Binary data with length less than 15 may be encoded by a single octet length [x20-x2f]. len = code - 0x20 &#x4E8C;&#x8FDB;&#x5236;&#x793A;&#x4F8B;1234567x20 # 0&#x957F;&#x5EA6;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;x23 x01 x02 x03 # 3&#x4E2A;&#x516B;&#x5B57;&#x8282;&#x6570;&#x636E;B x10 x00 .... # 4k &#x7ED3;&#x5C3E;&#x6570;&#x636E;&#x5757;b x04 x00 .... # 1k &#x975E;&#x7ED3;&#x5C3E;&#x6570;&#x636E;&#x5757; booleanBoolean&#x8BED;&#x6CD5;12boolean ::= T ::= F &#x5B57;&#x8282; &apos;F&apos; &#x8868;&#x793A;false&#xFF0C;&#x5B57;&#x8282; &apos;T&apos; &#x8868;&#x793A;true Boolean &#x793A;&#x4F8B;12T # trueF # false dateDate &#x8BED;&#x6CD5;12date ::= x4a b7 b6 b5 b4 b3 b2 b1 b0 ::= x4b b4 b3 b2 b1 b0 &#x65E5;&#x671F;&#x7C7B;&#x578B;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;64&#x4F4D;&#x7684;long&#x8868;&#x793A;&#x4ECE;1970-01-01 00:00:00&#x4EE5;&#x6765;&#x7ECF;&#x8FC7;&#x7684;&#x6BEB;&#x79D2;&#x6570;&#x3002; Date represented by a 64-bit long of milliseconds since Jan 1 1970 00:00H, UTC. &#x7D27;&#x51D1;&#x578B;&#xFF1A;&#x4F7F;&#x7528;&#x5206;&#x949F;&#x8868;&#x793A;&#x65E5;&#x671F;The second form contains a 32-bit int of minutes since Jan 1 1970 00:00H, UTC. &#x65E5;&#x671F; &#x793A;&#x4F8B;123x4a x00 x00 x00 xd0 x4b x92 x84 xb8 # 09:51:31 May 8, 1998 UTCx4b x4b x92 x0b xa0 # 09:51:00 May 8, 1998 UTC doubleDouble &#x8BED;&#x6CD5;123456double ::= D b7 b6 b5 b4 b3 b2 b1 b0 ::= x5b ::= x5c ::= x5d b0 ::= x5e b1 b0 ::= x5f b3 b2 b1 b0 &#x4E00;&#x4E2A;64&#x4F4D;&#x7684;IEEE&#x6807;&#x51C6;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#x3002; A 64-bit IEEE floating pointer number. &#x538B;&#x7F29;&#xFF1A;double zeroThe double 0.0 can be represented by the octet x5b &#x538B;&#x7F29;&#xFF1A;double oneThe double 1.0 can be represented by the octet x5c &#x538B;&#x7F29;: double octet Doubles between -128.0 and 127.0 with no fractional component can be represented in two octets by casting the byte value to a double. value = (double) b0 &#x538B;&#x7F29;: double shortDoubles between -32768.0 and 32767.0 with no fractional component can be represented in three octets by casting the short value to a double. value = (double) (256 * b1 + b0) &#x538B;&#x7F29;: double floatDoubles which are equivalent to their 32-bit float representation can be represented as the 4-octet float and then cast to double. Double &#x793A;&#x4F8B;123456789101112x5b # 0.0x5c # 1.0x5d x00 # 0.0x5d x80 # -128.0x5d x7f # 127.0x5e x00 x00 # 0.0x5e x80 x00 # -32768.0x5e x7f xff # 32767.0D x40 x28 x80 x00 x00 x00 x00 x00 # 12.25 intInteger &#x8BED;&#x6CD5;&#xFF1A;1234int ::= &apos;I&apos; b3 b2 b1 b0 ::= [x80-xbf] ::= [xc0-xcf] b0 ::= [xd0-xd7] b1 b0 A 32-bit signed integer. An integer is represented by the octet x49 (&#x2018;I&#x2019;) followed by the 4 octets of the integer in big-endian order. value = (b3 &lt;&lt; 24) + (b2 &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0; Compact: single octet integersIntegers between -16 and 47 can be encoded by a single octet in the range x80 to xbf. value = code - 0x90 Compact: two octet integersIntegers between -2048 and 2047 can be encoded in two octets with the leading byte in the range xc0 to xcf. value = ((code - 0xc8) &lt;&lt; 8) + b0; Compact: three octet integersIntegers between -262144 and 262143 can be encoded in three bytes with the leading byte in the range xd0 to xd7. value = ((code - 0xd4) &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0; Integer Examples123456789101112131415x90 # 0x80 # -16xbf # 47xc8 x00 # 0xc0 x00 # -2048xc7 x00 # -256xcf xff # 2047xd4 x00 x00 # 0xd0 x00 x00 # -262144xd7 xff xff # 262143I x00 x00 x00 x00 # 0I x00 x00 x01 x2c # 300 listList &#x8BED;&#x6CD5; 123456list ::= x55 type value* &apos;Z&apos; # variable-length list ::= &apos;V&apos; type int value* # fixed-length list ::= x57 value* &apos;Z&apos; # variable-length untyped list ::= x58 int value* # fixed-length untyped list ::= [x70-77] type value* # fixed-length typed list ::= [x78-7f] value* # fixed-length untyped list An ordered list, like an array. The two list productions are a fixed-length list and a variable length list. Both lists have a type. The type string may be an arbitrary UTF-8 string understood by the service. Each list item is added to the reference list to handle shared and circular elements. See the ref element. Any parser expecting a list must also accept a null or a shared ref. The valid values of type are not specified in this document and may depend on the specific application. For example, a server implemented in a language with static typing which exposes an Hessian interface can use the type information to instantiate the specific array type. On the other hand, a server written in a dynamicly-typed language would likely ignore the contents of type entirely and create a generic array. Compact: fixed length listHessian 2.0 allows a compact form of the list for successive lists of the same type where the length is known beforehand. The type and length are encoded by integers, where the type is a reference to an earlier specified type. TOC List &#x793A;&#x4F8B;Serialization of a typed int array: int[] = {0, 1}12345V # fixed length, typed list x04 [int # encoding of int[] type x92 # length = 2 x90 # integer 0 x91 # integer 1 untyped variable-length list = {0, 1}1234x57 # variable-length, untyped x90 # integer 0 x91 # integer 1 Z fixed-length type12345678910x72 # typed list length=2 x04 [int # type for int[] (save as type #0) x90 # integer 0 x91 # integer 1x73 # typed list length = 3 x90 # type reference to int[] (integer #0) x92 # integer 2 x93 # integer 3 x94 # integer 4 longLong &#x8BED;&#x6CD5;12345long ::= L b7 b6 b5 b4 b3 b2 b1 b0 ::= [xd8-xef] ::= [xf0-xff] b0 ::= [x38-x3f] b1 b0 ::= x4c b3 b2 b1 b0 A 64-bit signed integer. An long is represented by the octet x4c (&#x2018;L&#x2019; ) followed by the 8-bytes of the integer in big-endian order. Compact: single octet longsLongs between -8 and 15 are represented by a single octet in the range xd8 to xef. value = (code - 0xe0) Compact: two octet longsLongs between -2048 and 2047 are encoded in two octets with the leading byte in the range xf0 to xff. value = ((code - 0xf8) &lt;&lt; 8) + b0 Compact: three octet longsLongs between -262144 and 262143 are encoded in three octets with the leading byte in the range x38 to x3f. value = ((code - 0x3c) &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0 Compact: four octet longsLongs between which fit into 32-bits are encoded in five octets with the leading byte x4c. value = (b3 &lt;&lt; 24) + (b2 &lt;&lt; 16) + (b1 &lt;&lt; 8) + b0 Long Examples1234567891011121314151617xe0 # 0xd8 # -8xef # 15xf8 x00 # 0xf0 x00 # -2048xf7 x00 # -256xff xff # 2047x3c x00 x00 # 0x38 x00 x00 # -262144x3f xff xff # 262143x4c x00 x00 x00 x00 # 0x4c x00 x00 x01 x2c # 300L x00 x00 x00 x00 x00 x00 x01 x2c # 300 mapMap &#x8BED;&#x6CD5;1map ::= M type (value value)* Z Represents serialized maps and can represent objects. The type element describes the type of the map. The type may be empty, i.e. a zero length. The parser is responsible for choosing a type if one is not specified. For objects, unrecognized keys will be ignored. Each map is added to the reference list. Any time the parser expects a map, it must also be able to support a null or a ref. The type is chosen by the service. Map &#x793A;&#x4F8B;A sparse array1234map = new HashMap();map.put(new Integer(1), &quot;fee&quot;);map.put(new Integer(16), &quot;fie&quot;);map.put(new Integer(256), &quot;foe&quot;); 1234567891011H # untyped map (HashMap for Java) x91 # 1 x03 fee # &quot;fee&quot; xa0 # 16 x03 fie # &quot;fie&quot; xc9 x00 # 256 x03 foe # &quot;foe&quot; Z Map Representation of a Java Object 12345public class Car implements Serializable { String color = &quot;aquamarine&quot;; String model = &quot;Beetle&quot;; int mileage = 65536;} 123456789101112M x13 com.caucho.test.Car # type x05 color # color field x0a aquamarine x05 model # model field x06 Beetle x07 mileage # mileage field I x00 x01 x00 x00 Z nullNull &#x8BED;&#x6CD5;1null ::= N Null &#x8868;&#x793A;&#x7A7A;&#x6307;&#x9488;&#x3002;&#x5B57;&#x8282; &apos;N&apos; &#x8868;&#x793A;null&#x503C;&#x3002; objectObject &#x8BED;&#x6CD5;1234class-def ::= &apos;C&apos; string int string*object ::= &apos;O&apos; int value* ::= [x60-x6f] value* &#x538B;&#x7F29;: class definitionHessian 2.0 has a compact object form where the field names are only serialized once. Following objects only need to serialize their values. The object definition includes a mandatory type string, the number of fields, and the field names. The object definition is stored in the object definition map and will be referenced by object instances with an integer reference. &#x538B;&#x7F29;: object instantiationHessian 2.0 has a compact object form where the field names are only serialized once. Following objects only need to serialize their values. The object instantiation creates a new object based on a previous definition. The integer value refers to the object definition. Object &#x793A;&#x4F8B;Object &#x5E8F;&#x5217;&#x5316;&#xFF1A;123456789101112131415161718192021222324class Car { String color; String model;}out.writeObject(new Car(&quot;red&quot;, &quot;corvette&quot;));out.writeObject(new Car(&quot;green&quot;, &quot;civic&quot;));---C # object definition (#0) x0b example.Car # type is example.Car x92 # two fields x05 color # color field name x05 model # model field nameO # object def (long form) x90 # object definition #0 x03 red # color field value x08 corvette # model field valuex60 # object def #0 (short form) x05 green # color field value x05 civic # model field value &#x679A;&#x4E3E;&#x7C7B;&#x578B;&#xFF1A;1234567891011121314151617181920212223242526272829 enum Color { RED, GREEN, BLUE,}out.writeObject(Color.RED);out.writeObject(Color.GREEN);out.writeObject(Color.BLUE);out.writeObject(Color.GREEN);---C # class definition #0 x0b example.Color # type is example.Color x91 # one field x04 name # enumeration field is &quot;name&quot;x60 # object #0 (class def #0) x03 RED # RED valuex60 # object #1 (class def #0) x90 # object definition ref #0 x05 GREEN # GREEN valuex60 # object #2 (class def #0) x04 BLUE # BLUE valuex51 x91 # object ref #1, i.e. Color.GREEN refRef &#x8BED;&#x6CD5;1ref ::= x51 int An integer referring to a previous list, map, or object instance. As each list, map or object is read from the input stream, it is assigned the integer position in the stream, i.e. the first list or map is &#x2018;0&#x2019;, the next is &#x2018;1&#x2019;, etc. A later ref can then use the previous object. Writers MAY generate refs. Parsers MUST be able to recognize them. ref can refer to incompletely-read items. For example, a circular linked-list will refer to the first link before the entire list has been read. A possible implementation would add each map, list, and object to an array as it is read. The ref will return the corresponding value from the array. To support circular structures, the implementation would store the map, list or object immediately, before filling in the contents. Each map or list is stored into an array as it is parsed. ref selects one of the stored objects. The first object is numbered &#x2018;0&#x2019;. Ref &#x793A;&#x4F8B;Circular list1234567891011121314list = new LinkedList();list.data = 1;list.tail = list;---C x0a LinkedList x92 x04 head x04 tailo x90 # object stores ref #0 x91 # data = 1 x51 x90 # next field refers to itself, i.e. ref #0 ref only refers to list, map and objects elements. Strings and binary data, in particular, will only share references if they&#x2019;re wrapped in a list or map. stringString &#x8BED;&#x6CD5;1234string ::= x52 b1 b0 &lt;utf8-data&gt; string ::= S b1 b0 &lt;utf8-data&gt; ::= [x00-x1f] &lt;utf8-data&gt; ::= [x30-x33] b0 &lt;utf8-data&gt; A 16-bit unicode character string encoded in UTF-8. Strings are encoded in chunks. x53 (&#x2018;S&#x2019;) represents the final chunk and x52 (&#x2018;R&#x2019;) represents any non-final chunk. Each chunk has a 16-bit unsigned integer length value. The length is the number of 16-bit characters, which may be different than the number of bytes. String chunks may not split surrogate pairs. &#x538B;&#x7F29;: short stringsStrings with length less than 32 may be encoded with a single octet length [x00-x1f]. value = code String &#x793A;&#x4F8B;12345678x00 # &quot;&quot;, empty stringx05 hello # &quot;hello&quot;x01 xc3 x83 # &quot;\\u00c3&quot;S x00 x05 hello # &quot;hello&quot; in long formx52 x00 x07 hello, # &quot;hello, world&quot; split into two chunks x05 world typeType &#x8BED;&#x6CD5;12type ::= string ::= int A map or list includes a type attribute indicating the type name of the map or list for object-oriented languages. Each type is added to the type map for future reference. &#x538B;&#x7F29;: type &#x5F15;&#x7528;Repeated type strings MAY use the type map to refer to a previously used type. The type reference is zero-based over all the types encountered during parsing. &#x5F15;&#x7528;&#x6620;&#x5C04;Hessian 2.0 &#x6709;&#x4E09;&#x79CD;&#x5185;&#x7F6E;&#x5F15;&#x7528;&#x6620;&#x5C04;: An map/object/list reference map. An class definition map. A type (class name) map. The value reference map lets Hessian support arbitrary graphs, and recursive and circular data structures. The class and type maps improve Hessian efficiency by avoiding repetition of common string data. &#x503C;&#x5F15;&#x7528;Hessian supports arbitrary graphs by adding list, object, and map as it encounters them in the bytecode stream. Parsers MUST store each list, object and map in the reference map as they are encountered. The stored objects can be used with a ref bytecode. class &#x5F15;&#x7528;Each object definition is automatically added to the class-map. Parsers MUST add a class definition to the class map as each is encountered. Following object instances will refer to the defined class. type &#x5F15;&#x7528;The type strings for map and list values are stored in a type map for reference. Parsers MUST add a type string to the type map as each is encountered. &#x5B57;&#x8282;&#x6620;&#x5C04;Hessian is organized as a bytecode protocol. A Hessian reader is essentially a switch statement on the initial octet. &#x5B57;&#x8282;&#x7F16;&#x7801;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445x00 - x1f # utf-8 string length 0-32x20 - x2f # binary data length 0-16x30 - x33 # utf-8 string length 0-1023x34 - x37 # binary data length 0-1023x38 - x3f # three-octet compact long (-x40000 to x3ffff)x40 # reserved (expansion/escape)x41 # 8-bit binary data non-final chunk (&apos;A&apos;)x42 # 8-bit binary data final chunk (&apos;B&apos;)x43 # object type definition (&apos;C&apos;)x44 # 64-bit IEEE encoded double (&apos;D&apos;)x45 # reservedx46 # boolean false (&apos;F&apos;)x47 # reservedx48 # untyped map (&apos;H&apos;)x49 # 32-bit signed integer (&apos;I&apos;)x4a # 64-bit UTC millisecond datex4b # 32-bit UTC minute datex4c # 64-bit signed long integer (&apos;L&apos;)x4d # map with type (&apos;M&apos;)x4e # null (&apos;N&apos;)x4f # object instance (&apos;O&apos;)x50 # reservedx51 # reference to map/list/object - integer (&apos;Q&apos;)x52 # utf-8 string non-final chunk (&apos;R&apos;)x53 # utf-8 string final chunk (&apos;S&apos;)x54 # boolean true (&apos;T&apos;)x55 # variable-length list/vector (&apos;U&apos;)x56 # fixed-length list/vector (&apos;V&apos;)x57 # variable-length untyped list/vector (&apos;W&apos;)x58 # fixed-length untyped list/vector (&apos;X&apos;)x59 # long encoded as 32-bit int (&apos;Y&apos;)x5a # list/map terminator (&apos;Z&apos;)x5b # double 0.0x5c # double 1.0x5d # double represented as byte (-128.0 to 127.0)x5e # double represented as short (-32768.0 to 327676.0)x5f # double represented as floatx60 - x6f # object with direct typex70 - x77 # fixed list with direct lengthx78 - x7f # fixed untyped list with direct lengthx80 - xbf # one-octet compact int (-x10 to x3f, x90 is 0)xc0 - xcf # two-octet compact int (-x800 to x7ff)xd0 - xd7 # three-octet compact int (-x40000 to x3ffff)xd8 - xef # one-octet compact long (-x8 to xf, xe0 is 0)xf0 - xff # two-octet compact long (-x800 to x7ff, xf8 is 0) &#x4F5C;&#x8005;&#x8054;&#x7CFB;&#x65B9;&#x5F0F;123456Scott FergusonCaucho Technology Inc.P.O. Box 9001La Jolla, CA 92038USAEmail: ferg@caucho.com 123456Emil OngCaucho Technology Inc.P.O. Box 9001La Jolla, CA 92038USAEmail: emil@caucho.com Full Copyright StatementCopyright &#xA9; The IETF Trust (2007). This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights. This document and the information contained herein are provided on an &#x201C;AS IS&#x201D; basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Intellectual PropertyThe IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79. Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr. The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.","categories":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/categories/java/"}],"tags":[{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/tags/hessian/"},{"name":"序列化","slug":"序列化","permalink":"https://yyhan.github.io/tags/序列化/"}]},{"title":"Spring MVC基本配置","slug":"Spring-MVC基本配置","date":"2017-06-15T14:25:45.000Z","updated":"2017-06-15T14:57:09.491Z","comments":true,"path":"2017/06/15/Spring-MVC基本配置/","link":"","permalink":"https://yyhan.github.io/2017/06/15/Spring-MVC基本配置/","excerpt":"","text":"","categories":[{"name":"spring","slug":"spring","permalink":"https://yyhan.github.io/categories/spring/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://yyhan.github.io/tags/spring/"}]},{"title":"hessian 常见问题","slug":"hessian-常见问题","date":"2017-06-15T13:22:54.000Z","updated":"2017-06-15T14:24:28.865Z","comments":true,"path":"2017/06/15/hessian-常见问题/","link":"","permalink":"https://yyhan.github.io/2017/06/15/hessian-常见问题/","excerpt":"","text":"hessian&#x63A5;&#x53E3;&#x670D;&#x52A1;&#x7AEF;&#x548C;&#x5BA2;&#x6237;&#x7AEF;&#x5BF9;&#x8C61;&#x4E0D;&#x4E00;&#x81F4;&#x95EE;&#x9898;&#x5B57;&#x6BB5;&#x6570;&#x91CF;&#x4E0D;&#x4E00;&#x81F4;hessian&#x5141;&#x8BB8;&#x5BA2;&#x6237;&#x7AEF;&#x548C;&#x670D;&#x52A1;&#x7AEF;&#x5BF9;&#x8C61;&#x5B57;&#x6BB5;&#x4E0D;&#x4E00;&#x81F4;&#xFF0C;&#x589E;&#x52A0;&#x3001;&#x5220;&#x9664;&#x5B57;&#x6BB5;&#x90FD;&#x4E0D;&#x5F71;&#x54CD;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x540C;&#x540D;&#x5B57;&#x6BB5;&#xFF0C;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x5B57;&#x6BB5;&#x7C7B;&#x578B;&#x4E00;&#x81F4;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x62A5;&#x5F02;&#x5E38;&#xFF1A; &#x4F8B;&#x5982;&#x670D;&#x52A1;&#x7AEF;&#x4E3A;BigDecimal&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x4E3A;int&#xFF1A;1com.caucho.hessian.client.HessianRuntimeException: com.caucho.hessian.io.HessianFieldException: com.demo.entity.DemoBean.number: expected integer at 0x43 java.math.BigDecimal (1233456) &#x63A5;&#x53E3;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;&#x4E0D;&#x4E00;&#x81F4;&#x5F53;&#x670D;&#x52A1;&#x7AEF;&#x8FD4;&#x56DE;&#x5BF9;&#x8C61;&#x548C;&#x5BA2;&#x6237;&#x7AEF;&#x671F;&#x671B;&#x83B7;&#x53D6;&#x7684;&#x5BF9;&#x8C61;&#x4E0D;&#x4E00;&#x81F4;&#x65F6;&#xFF0C;&#x6BD4;&#x5982;&#x670D;&#x52A1;&#x7AEF;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A;A&#xFF0C;&#x4F46;&#x662F;&#x5BA2;&#x6237;&#x7AEF;&#x63A5;&#x53D7;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A;B&#xFF0C;&#x6B64;&#x65F6;hessian&#x4F7F;&#x7528;map&#x6620;&#x5C04;&#x7684;&#x65B9;&#x5F0F;&#x89E3;&#x6790;&#xFF0C;&#x6839;&#x636E;&#x5B57;&#x6BB5;&#x540D;&#x6620;&#x5C04;&#xFF0C;&#x4F46;&#x662F;&#x4F1A;&#x8BB0;&#x5F55;&#x4E00;&#x4E9B;&#x8B66;&#x544A;&#x65E5;&#x5FD7;&#xFF1A;12345678[2017-06-15 22:17:00,267] &#x8B66;&#x544A; com.caucho.hessian.io.SerializerFactory getDeserializer - Hessian/Burlap: &apos;com.demo.entity.DemoBean&apos; is an unknown class in sun.misc.Launcher$AppClassLoader@18b4aac2:java.lang.ClassNotFoundException: com.demo.entity.DemoBean [2017-06-15 22:17:00,282] &#x8F83;&#x8BE6;&#x7EC6; com.caucho.hessian.io.SerializerFactory getDeserializer - java.lang.ClassNotFoundException: com.demo.entity.DemoBean [2017-06-15 22:17:01,194] &#x8B66;&#x544A; com.caucho.hessian.io.SerializerFactory getDeserializer - Hessian/Burlap: &apos;com.demo.entity.DemoBean&apos; is an unknown class in sun.misc.Launcher$AppClassLoader@18b4aac2:java.lang.ClassNotFoundException: com.demo.entity.DemoBean [2017-06-15 22:17:01,194] &#x8F83;&#x8BE6;&#x7EC6; com.caucho.hessian.io.SerializerFactory getDeserializer - java.lang.ClassNotFoundException: com.demo.entity.DemoBean MyHessianServlet.getDeserializer: com.demo.entity.Demo2Bean[2017-06-15 22:17:01,196] &#x8BE6;&#x7EC6; com.caucho.hessian.io.SerializerFactory getObjectDeserializer - hessian: expected deserializer &apos;com.demo.entity.Demo2Bean&apos; at &apos;com.demo.entity.DemoBean&apos; (java.util.HashMap)","categories":[{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/categories/hessian/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/tags/hessian/"}]},{"title":"hessian 序列化BigDecimal问题","slug":"hessian-序列化BigDecimal问题","date":"2017-06-13T14:49:43.000Z","updated":"2017-06-18T13:16:02.180Z","comments":true,"path":"2017/06/13/hessian-序列化BigDecimal问题/","link":"","permalink":"https://yyhan.github.io/2017/06/13/hessian-序列化BigDecimal问题/","excerpt":"","text":"hessian&#x5904;&#x7406;BigDecimal&#x65F6;&#xFF0C;&#x9ED8;&#x8BA4;&#x5C06;BigDecimal&#x4F5C;&#x4E3A;Object&#x5BF9;&#x8C61;&#x5904;&#x7406;&#xFF0C;&#x5C1D;&#x8BD5;&#x5C06;BigDecimal&#x7684;&#x5404;&#x4E2A;&#x5B57;&#x6BB5;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x4F20;&#x8F93;&#x5230;&#x5BA2;&#x6237;&#x7AEF;&#x7684;BigDecimal&#x4F4D;0&#x3002; &#x76EE;&#x524D;&#x6709;&#x4E09;&#x79CD;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF1A; &#x5BF9;hessian&#x91CD;&#x65B0;&#x6253;&#x5305; &#x5B9E;&#x73B0;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x5E8F;&#x5217;&#x5316;&#x63A5;&#x53E3; &#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x7684;AbstractSerializerFactory &#x5BF9;hessian&#x91CD;&#x65B0;&#x6253;&#x5305;&#x521B;&#x5EFA;META-INF/hessian/serializers&#x6587;&#x4EF6;&#xFF0C;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x4E2D;&#x6DFB;&#x52A0;:1java.math.BigDecimal=com.caucho.hessian.io.StringValueSerializer &#x521B;&#x5EFA;META-INF/hessian/deserializers&#x6587;&#x4EF6;&#xFF0C;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x4E2D;&#x6DFB;&#x52A0;:1java.math.BigDecimal=com.caucho.hessian.io.BigDecimalDeserializer &#x6307;&#x5B9A;&#x4F7F;&#x7528;StringValueSerializer&#x5E8F;&#x5217;&#x5316;BigDecimal&#x5BF9;&#x8C61;&#xFF0C;&#x4F7F;&#x7528;BigDecimalDeserializer&#x53CD;&#x5E8F;&#x5217;&#x5316;BigDecimal&#x5BF9;&#x8C61;&#x3002; &#x5B9E;&#x73B0;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x5E8F;&#x5217;&#x5316;&#x63A5;&#x53E3;&#x5B9E;&#x73B0;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#xFF08;com.caucho.hessian.io.Serializer&#xFF09;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x63A5;&#x53E3;&#xFF08;com.caucho.hessian.io.Deserializer&#xFF09;&#x3002; &#x5E8F;&#x5217;&#x5316;&#x7684;&#x7C7B;&#x540D;&#x5FC5;&#x987B;&#x4E3A; cl.getName() + &quot;HessianSerializer&quot; &#x53CD;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x7C7B;&#x540D;&#x5FC5;&#x987B;&#x4E3A; cl.getName() + &quot;HessianDeserializer&quot; &#x540C;&#x65F6;&#x5FC5;&#x987B;&#x548C;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x5305;&#x8DEF;&#x5F84;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x3002; &#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x7684;AbstractSerializerFactory&#x5B9E;&#x73B0;&#x81EA;&#x5DF1;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382;&#x7C7B;&#xFF0C;&#x5E76;&#x6DFB;&#x52A0;&#x5230;&#x9ED8;&#x8BA4;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382;&#x4E2D;&#x3002;&#x6709;&#x4E09;&#x5904;&#x6539;&#x52A8;&#xFF1A; &#x81EA;&#x5B9A;&#x4E49;AbstractSerializerFactory 12345678910111213141516171819202122232425262728293031package com.cloudin.hessian.support;import com.caucho.hessian.io.*;import java.math.BigDecimal;import java.util.HashMap;import java.util.Map;/** * Created by YFHan on 2017/6/15 0015. */public class MyAbstractSerializerFactory extends AbstractSerializerFactory { private Map&lt;String, Serializer&gt; serializerMap = new HashMap&lt;&gt;(); private Map&lt;String, Deserializer&gt; deserializerMap = new HashMap&lt;&gt;(); public MyAbstractSerializerFactory() { serializerMap.put(BigDecimal.class.getName(), new StringValueSerializer()); deserializerMap.put(BigDecimal.class.getName(), new BigDecimalDeserializer()); } @Override public Serializer getSerializer(Class cl) throws HessianProtocolException { return serializerMap.get(cl.getName()); } @Override public Deserializer getDeserializer(Class cl) throws HessianProtocolException { return deserializerMap.get(cl.getName()); }} &#x81EA;&#x5B9A;&#x4E49;HessianServlet 123456789101112131415161718192021222324252627282930package com.cloudin.hessian.support;import com.caucho.hessian.io.*;import com.caucho.hessian.server.HessianServlet;import javax.servlet.ServletException;import java.math.BigDecimal;import java.util.HashMap;import java.util.Map;/** * &#x81EA;&#x5B9A;&#x4E49;HessianServlet * Created by YFHan on 2017/6/12 0012. */public class MyHessianServlet extends HessianServlet { private SerializerFactory serializerFactory; @Override public void init(javax.servlet.ServletConfig config) throws ServletException { super.init(config); serializerFactory = super.getSerializerFactory(); serializerFactory.addFactory(new MyAbstractSerializerFactory()); } @Override public SerializerFactory getSerializerFactory() { return serializerFactory; }} &#x5411;HessianProxyFactory&#x4E2D;&#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382;&#x5B9E;&#x4F8B; 12HessianProxyFactory hessianProxyFactory = new HessianProxyFactory();hessianProxyFactory.getSerializerFactory().addFactory(new MyAbstractSerializerFactory()); &#x603B;&#x7ED3; &#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6848;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x5199;&#x4EFB;&#x4F55;&#x4EE3;&#x7801;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x81EA;&#x5DF1;&#x7EF4;&#x62A4;hessian&#x7684;&#x6253;&#x5305; &#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6848;&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;&#x7A0B;&#x5EA6;&#x5F88;&#x9AD8;&#xFF0C;&#x4F46;&#x662F;&#x9700;&#x8981;&#x5BF9;hessian&#x7684;&#x5E8F;&#x5217;&#x5316;&#x534F;&#x8BAE;&#x975E;&#x5E38;&#x4E86;&#x89E3;&#xFF0C;&#x4F46;&#x662F;&#x5DE5;&#x4F5C;&#x91CF;&#x5F88;&#x5927;&#xFF0C;&#x4E00;&#x822C;&#x4E0D;&#x7528; &#x7B2C;&#x4E09;&#x79CD;&#x65B9;&#x6848;&#x548C;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6848;&#x539F;&#x7406;&#x4E00;&#x81F4;&#xFF0C;&#x867D;&#x7136;&#x9700;&#x8981;&#x4E9B;&#x4EE3;&#x7801;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E9B;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x62BD;&#x51FA;&#x4F5C;&#x4E3A;&#x56E2;&#x961F;&#x516C;&#x5171;&#x4EE3;&#x7801;&#xFF0C;&#x57FA;&#x672C;&#x4E0D;&#x9700;&#x8981;&#x8DDF;&#x968F;hessian&#x7248;&#x672C;&#x5347;&#x7EA7;&#x800C;&#x505A;&#x51FA;&#x6539;&#x52A8;&#xFF0C;&#x540C;&#x65F6;&#x5982;&#x679C;&#x6709;&#x9700;&#x8981;&#xFF0C;&#x53EF;&#x4EE5;&#x968F;&#x65F6;&#x6DFB;&#x52A0;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x65B9;&#x5F0F;&#x3002; &#x4E2A;&#x4EBA;&#x6BD4;&#x8F83;&#x63A8;&#x8350;&#x7B2C;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#x3002;","categories":[{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/categories/hessian/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/tags/hessian/"},{"name":"BigDecimal","slug":"BigDecimal","permalink":"https://yyhan.github.io/tags/BigDecimal/"}]},{"title":"hessian 序列化和反序列化","slug":"hessian-序列化和反序列化","date":"2017-06-10T17:29:48.000Z","updated":"2017-06-15T13:35:01.974Z","comments":true,"path":"2017/06/11/hessian-序列化和反序列化/","link":"","permalink":"https://yyhan.github.io/2017/06/11/hessian-序列化和反序列化/","excerpt":"","text":"hessian&#x8BF7;&#x6C42;&#x4EE3;&#x7406;com.caucho.hessian.client.HessianProxy.invoke(Object proxy, Method method, Object []args); // &#x901A;&#x8FC7;&#x4EE3;&#x7406;&#x65B9;&#x5F0F;&#x8C03;&#x7528;&#x8FDC;&#x7A0B;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x7ED3;&#x679C; com.caucho.hessian.io.Hessian2Input.readReply(Class expectedClass); // &#x8BFB;&#x53D6;&#x8FD4;&#x56DE;&#x7ED3;&#x679C; readObject(Class cl); // &#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x7C7B;&#x5BF9;&#x8C61; &#x5E8F;&#x5217;&#x5316;&#x5668;&#x67E5;&#x627E;&#x6D41;&#x7A0B; 1&#x3001;&#x901A;&#x8FC7; SerializerFactory.getObjectSerializer(object.getClass()) &#xFF0C;&#x83B7;&#x53D6;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.1&#x3001;&#x8C03;&#x7528; SerializerFactory.getSerializer(Class cl) &#x83B7;&#x53D6;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.2&#x3001;&#x5982;&#x679C; _cachedSerializerMap &#x7F13;&#x5B58;&#x4E2D;&#x6709;&#xFF0C;&#x5219;&#x53D6;&#x7F13;&#x5B58;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.3&#x3001;&#x5982;&#x679C;&#x7F13;&#x5B58;&#x6CA1;&#x6709;&#xFF0C;&#x8C03;&#x7528; SerializerFactory.loadSerializer(Class&lt;?&gt; cl) &#x83B7;&#x53D6;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.4&#x3001;&#x904D;&#x5386; SerializerFactory._factories&#xFF08;&#x81EA;&#x884C;&#x6DFB;&#x52A0;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x5DE5;&#x5382;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x5DE5;&#x5382;&#x63D0;&#x4F9B;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5C31;&#x91C7;&#x7528;&#x8BE5;&#x5DE5;&#x5382;&#x63D0;&#x4F9B;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.5&#x3001;&#x5426;&#x5219;&#xFF08;1.4&#xFF09;&#xFF0C;&#x8C03;&#x7528; SerializerFactory &#x521D;&#x59CB;&#x5316;&#x65F6;&#x6784;&#x9020;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382; ContextSerializerFactory.getSerializer(Class cl) &#x67E5;&#x8BE2;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x91C7;&#x7528; 1.6&#x3001;&#x5426;&#x5219;&#xFF08;1.5&#xFF09;&#xFF0C;&#x5C31;&#x4F7F;&#x7528;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6784;&#x9020; ContextSerializerFactory&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x8BE5;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382;&#x7684;getCustomSerializer()&#x67E5;&#x8BE2;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x91C7;&#x7528; 1.6.1&#x3001;Class.forName(cl.getName() + &quot;HessianSerializer&quot;, false, cl.getClassLoader())&#x83B7;&#x53D6;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.7&#x3001;&#x5426;&#x5219;&#xFF08;1.6&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x662F;com.caucho.hessian.io.HessianRemoteObject&#x7C7B;&#x578B;&#x6216;&#x5176;&#x5B50;&#x7C7B;&#xFF0C;&#x8FD4;&#x56DE;com.caucho.hessian.io.RemoteSerializer 1.8&#x3001;&#x5426;&#x5219;&#xFF08;1.7&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x662F;com.caucho.burlap.io.BurlapRemoteObject&#x7C7B;&#x578B;&#x6216;&#x5176;&#x5B50;&#x7C7B;&#xFF0C;&#x8FD4;&#x56DE;com.caucho.hessian.io.RemoteSerializer 1.9&#x3001;&#x5426;&#x5219;&#xFF08;1.8&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x62E5;&#x6709;&#x540D;&#x4E3A;writeReplace&#x7684;&#x65E0;&#x53C2;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x6839;&#x636E;&#x8BE5;&#x65B9;&#x6CD5;&#x6784;&#x9020;&#x4E00;&#x4E2A;WriteReplaceSerializer&#x8FD4;&#x56DE; 1.10&#x3001;&#x5426;&#x5219;&#xFF08;1.9&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x662F;Map&#xFF0C;&#x8FD4;&#x56DE;MapSerializer&#xFF08;&#x61D2;&#x52A0;&#x8F7D;&#xFF09; 1.11&#x3001;&#x5426;&#x5219;&#xFF08;1.10&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x662F;Collection&#xFF0C;&#x8FD4;&#x56DE;CollectionSerializer* &#xFF08;&#x61D2;&#x52A0;&#x8F7D;&#xFF09; 1.12&#x3001;&#x5426;&#x5219;&#xFF08;1.11&#xFF09;&#xFF0C;Array&#x3001;InputStream&#x3001;Iterator&#x3001;Calendar&#x3001;* Enumeration&#x3001;Enum&#x3001;Annotation&#x5206;&#x522B;&#x8FD4;&#x56DE;&#x5BF9;&#x5E94;&#x7684;&#x5185;&#x7F6E;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.13&#x3001;&#x5426;&#x5219;&#xFF08;1.12&#xFF09;&#xFF0C;&#x8C03;&#x7528;SerializerFactory.getDefaultSerializer(Class cl)&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 1.13.1&#x3001;&#x5982;&#x679C; _defaultSerializer &#x4E0D;&#x4E3A;&#x7A7A;&#xFF0C;&#x5C31;&#x91C7;&#x7528; 1.13.2&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x672A;&#x5B9E;&#x73B0;Serializable&#x63A5;&#x53E3;&#xFF0C;&#x4E14;&#x8BBE;&#x7F6E;&#x4E86;&#x7981;&#x6B62;&#x2018;&#x4E0D;&#x652F;&#x6301;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x7C7B;&#x2019;&#x7684;&#x72B6;&#x6001;_isAllowNonSerializable&#xFF0C;&#x5C06;&#x8DD1;&#x51FA;&#x5F02;&#x5E38;IllegalStateException 1.13.3&#x3001;&#x5982;&#x679C;&#x542F;&#x7528;&#x4E86;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5E76;&#x4E14;&#x76EE;&#x6807;&#x7C7B;&#x6CA1;&#x6709;&#x540D;&#x4E3A;writeReplace&#x7684;&#x65E0;&#x53C2;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x6784;&#x9020;&#x4E00;&#x4E2A;UnsafeSerializer&#x5E76;&#x8FD4;&#x56DE; 1.13.3.1&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x8BBE;&#x7F6E;&#x4E86;&#x6CE8;&#x89E3;HessianUnshared&#xFF08;&#x4E0D;&#x68C0;&#x6D4B;&#x91CD;&#x590D;&#x6216;&#x5FAA;&#x73AF;&#x5F15;&#x7528;&#xFF09;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;UnsafeUnsharedSerializer&#x5E76;&#x8FD4;&#x56DE; 1.13.3.2&#x3001;&#x5426;&#x5219;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;UnsafeSerializer&#x5E76;&#x8FD4;&#x56DE; 1.13.4&#x3001;&#x5426;&#x5219;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;JavaSerializer&#x5E76;&#x8FD4;&#x56DE; 1.13.4.1&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x8BBE;&#x7F6E;&#x4E86;&#x6CE8;&#x89E3;HessianUnshared&#xFF08;&#x4E0D;&#x68C0;&#x6D4B;&#x91CD;&#x590D;&#x6216;&#x5FAA;&#x73AF;&#x5F15;&#x7528;&#xFF09;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;JavaUnsharedSerializer&#x5E76;&#x8FD4;&#x56DE; 1.13.4.2&#x3001;&#x5426;&#x5219;&#xFF0C;&#x6784;&#x9020;&#x4E00;&#x4E2A;JavaSerializer&#x5E76;&#x8FD4;&#x56DE; 1.4&#x3001;&#x5C06;&#x5F97;&#x5230;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x653E;&#x5165;&#x7F13;&#x5B58; JavaSerializer &#x548C; UnsafeSerializer &#x7684;&#x533A;&#x522B;&#xFF1A; JavaSerializer&#xFF1A;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x673A;&#x5236;&#x83B7;&#x53D6;&#x5B57;&#x6BB5;&#x503C; UnsafeSerializer&#xFF1A;&#x901A;&#x8FC7;sun.misc.Unsafe&#x83B7;&#x53D6;&#x5B57;&#x6BB5;&#x7684;&#x503C; &#x53CD;&#x5E8F;&#x5217;&#x5316;&#x8FC7;&#x7A0B;1&#x3001;&#x4F7F;&#x7528;InputStream&#x6784;&#x9020;AbstractHessianInput&#x5BF9;&#x8C61;2&#x3001;&#x8C03;&#x7528;AbstractHessianInput.readReply(Class expectedClass)&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x54CD;&#x5E94;&#x5BF9;&#x8C61;3&#x3001;&#x5982;&#x679C;tag=&#x2019;R&#x2019;&#xFF0C;&#x8C03;&#x7528;readObject(Class cl)&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;4&#x3001;readObjectDefinition(Class&lt;?&gt; cl)&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5B9A;&#x4E49; 4.1&#x3001;SerializerFactory.getObjectDeserializer(String type, Class cl)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5982;&#x679C;cl&#x4E3A;null &#x6216; cl&#x548C;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x652F;&#x6301;&#x7684;&#x7C7B;&#x578B;&#x4E00;&#x81F4; &#x7B49;&#x60C5;&#x51B5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x8BE5;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.1.1&#x3001;SerializerFactory.getObjectDeserializer(String type)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.1.1.1&#x3001;SerializerFactory.getDeserializer(String type)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.1.1.1.1&#x3001;&#x5982;&#x679C;type&#x4E3A;[&#x5F00;&#x5934;&#xFF0C;&#x5C31;&#x6784;&#x9020;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x6570;&#x7EC4;&#x5185;&#x5BB9;&#xFF0C;&#x4F7F;&#x7528;type.substring(1)&#xFF0C;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x672C;&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x3002; 4.1.1.1.2&#x3001;&#x5426;&#x5219;&#x901A;&#x8FC7;&#x53CD;&#x5C04;Class.forName&#x5F97;&#x5230;type&#x5BF9;&#x5E94;&#x7684;&#x5B9E;&#x4F53;&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;&#x5F97;&#x5230;&#x7684;&#x5B9E;&#x4F53;&#x7C7B;&#x8C03;&#x7528;SerializerFactory.getDeserializer(Class cl)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2&#x3001;&#x5982;&#x679C;4.1.1&#x5F97;&#x5230;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x4E0D;&#x7B26;&#x5408;&#x8981;&#x6C42;&#xFF0C;&#x5C31;&#x8C03;&#x7528;SerializerFactory.getDeserializer(Class cl)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1&#x3001;&#x8C03;&#x7528;SerializerFactory.loadDeserializer(Class cl)&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1.1&#x3001;&#x904D;&#x5386; SerializerFactory._factories&#xFF08;&#x81EA;&#x884C;&#x6DFB;&#x52A0;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x5DE5;&#x5382;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x5DE5;&#x5382;&#x63D0;&#x4F9B;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5C31;&#x91C7;&#x7528;&#x8BE5;&#x5DE5;&#x5382;&#x63D0;&#x4F9B;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1.2&#x3001;&#x8C03;&#x7528; SerializerFactory &#x521D;&#x59CB;&#x5316;&#x65F6;&#x6784;&#x9020;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382; ContextSerializerFactory.getDeserializer(String className) &#x67E5;&#x8BE2;&#x5E8F;&#x53CD;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x91C7;&#x7528; 4.2.1.3&#x3001;&#x4F7F;&#x7528;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x6784;&#x9020; ContextSerializerFactory&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x8BE5;&#x5E8F;&#x5217;&#x5316;&#x5DE5;&#x5382;&#x7684;getCustomDeserializer()&#x67E5;&#x8BE2;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#xFF0C;&#x5C31;&#x91C7;&#x7528; 4.2.1.4&#x3001;Collection&#x3001;Map&#x3001;Iterator&#x3001;Annotation&#x3001;Interface&#xFF08;&#x4F7F;&#x7528;ObjectDeserializer&#xFF09;&#x3001;Array&#x3001;Enumeration&#x3001;Enum&#x3001;Class&#x90FD;&#x6709;&#x5185;&#x7F6E;&#x5BF9;&#x5E94;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1.5&#x3001;&#x8C03;&#x7528;SerializerFactory.getDefaultDeserializer(Class cl)&#x8FD4;&#x56DE;&#x9ED8;&#x8BA4;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1.5.1&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x4E3A;InputStream&#xFF0C;&#x4F7F;&#x7528;InputStreamDeserializer.DESER&#x4F5C;&#x4E3A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668; 4.2.1.5.2&#x3001;&#x5982;&#x679C;&#x542F;&#x7528;&#x4E86;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5668;&#xFF0C;&#x4F7F;&#x7528;UnsafeDeserializer(cl) 4.2.1.5.2.1&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x6709;&#x540D;&#x4E3A;readResolve&#x7684;&#x65E0;&#x53C2;&#x65B9;&#x6CD5;&#xFF0C;&#x6807;&#x8BB0;_readResolve.setAccessible(true) 4.2.1.5.3&#x3001;&#x5426;&#x5219;&#xFF0C;&#x4F7F;&#x7528;JavaDeserializer(cl) 4.2.1.5.3.1&#x3001;&#x5982;&#x679C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x6709;&#x540D;&#x4E3A;readResolve&#x7684;&#x65E0;&#x53C2;&#x65B9;&#x6CD5;&#xFF0C;&#x6807;&#x8BB0;_readResolve.setAccessible(true)5&#x3001;readObjectInstance(Class&lt;?&gt; cl, ObjectDefinition def)&#x6839;&#x636E;&#x4E0A;&#x4E00;&#x6B65;&#x7684;&#x7ED3;&#x679C;&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B; &#x7279;&#x6B8A;&#x95EE;&#x9898;&#x5BA2;&#x6237;&#x7AEF;&#x4E0E;&#x670D;&#x52A1;&#x7AEF;&#x5B57;&#x6BB5;&#x4E0D;&#x4E00;&#x81F4;1&#x3001;&#x5BA2;&#x6237;&#x7AEF;&#x591A;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x8BE5;&#x5B57;&#x6BB5;&#x53D6;JVM&#x9ED8;&#x8BA4;&#x503C;2&#x3001;&#x5BA2;&#x6237;&#x7AEF;&#x7F3A;&#x5931;&#x5B57;&#x6BB5;&#xFF0C;&#x8BE5;&#x5B57;&#x6BB5;&#x4E0D;&#x89E3;&#x6790;3&#x3001;&#x89E3;&#x6790;&#x65F6;&#x8BFB;&#x53D6;&#x5BF9;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x4EE5;&#x8FD4;&#x56DE;&#x7684;&#x6570;&#x636E;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x4E3A;&#x51C6;","categories":[{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/categories/hessian/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"hessian","slug":"hessian","permalink":"https://yyhan.github.io/tags/hessian/"}]},{"title":"Spring @Value注解","slug":"Spring-Value","date":"2017-05-16T15:45:22.000Z","updated":"2017-05-16T15:54:07.844Z","comments":true,"path":"2017/05/16/Spring-Value/","link":"","permalink":"https://yyhan.github.io/2017/05/16/Spring-Value/","excerpt":"","text":"Spring @Value&#x6CE8;&#x89E3;&#x7684;&#x7528;&#x6CD5;&#x3002; &#x57FA;&#x672C;&#x4F7F;&#x7528;1@Value(&quot;${user.name}&quot;) SpELl&#x65B9;&#x5F0F;systemProperties&#x662F;spring&#x81EA;&#x52A8;&#x6CE8;&#x5165;&#x7684;&#x7CFB;&#x7EDF;&#x53D8;&#x91CF;&#x96C6;&#x5408;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x81EA;&#x5DF1;&#x6CE8;&#x5165;&#x7684;&#x53D8;&#x91CF;&#x96C6;&#x5408;&#x3002;1@Value(&quot;#{systemProperties[&apos;user.name&apos;]}&quot;) &#x8BBE;&#x7F6E;&#x9ED8;&#x8BA4;&#x503C;1@Value(&quot;${user.name:root}&quot;) SpEl&#x65B9;&#x5F0F;&#x8BBE;&#x7F6E;&#x9ED8;&#x8BA4;&#x503C;1@Value(&quot;#{systemProperties[&apos;user.name&apos;] ?: &apos;root&apos;}&quot;) //&#x6CE8;&#x610F;&#x5B57;&#x7B26;&#x4E32;&#x8981;&#x52A0;&#x5355;&#x5F15;&#x53F7; &#x8BBE;&#x7F6E;null&#x503C;123@Value(&quot;${user.name:#{null}}&quot;) //&#x6DF7;&#x5408;&#x65B9;&#x5F0F;@Value(&quot;#{systemProperties[&apos;user.name&apos;] ?: null}&quot;) //&#x7EAF;SpEl&#x65B9;&#x5F0F; &#x68C0;&#x67E5;&#x662F;&#x5426;&#x4E3A;null&#x6216;&#x8005;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;1@Value(value = &quot;#{systemProperties[&apos;user.name&apos;] == null ? null : &apos;&apos;.equals(systemProperties[&apos;user.name&apos;]) ? null : systemProperties[&apos;user.name&apos;]}&quot;)","categories":[{"name":"spring","slug":"spring","permalink":"https://yyhan.github.io/categories/spring/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://yyhan.github.io/tags/spring/"},{"name":"value","slug":"value","permalink":"https://yyhan.github.io/tags/value/"},{"name":"注解","slug":"注解","permalink":"https://yyhan.github.io/tags/注解/"}]},{"title":"Log4j2配置","slug":"Log4j2配置","date":"2017-05-16T15:25:40.000Z","updated":"2017-05-16T15:33:48.398Z","comments":true,"path":"2017/05/16/Log4j2配置/","link":"","permalink":"https://yyhan.github.io/2017/05/16/Log4j2配置/","excerpt":"","text":"&#x4F7F;&#x7528;xml&#x65B9;&#x5F0F;&#x521D;&#x59CB;&#x5316;Log4j2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration status=&quot;WARN&quot;&gt; &lt;Appenders&gt; &lt;!-- &#x63A7;&#x5236;&#x53F0;appender --&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt; &lt;PatternLayout pattern=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;/&gt; &lt;/Console&gt; &lt;RollingFile name=&quot;appFileLog&quot; fileName=&quot;${log.dir}/logs/app.log&quot; filePattern=&quot;${log.dir}/logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz&quot;&gt; &lt;PatternLayout&gt; &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg %throwable{none}%n&lt;/Pattern&gt; &lt;/PatternLayout&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy /&gt; &lt;SizeBasedTriggeringPolicy size=&quot;250 MB&quot;/&gt; &lt;/Policies&gt; &lt;/RollingFile&gt; &lt;RollingFile name=&quot;appErrorFileLog&quot; fileName=&quot;${log.dir}/logs/app-error.log&quot; filePattern=&quot;${log.dir}/logs/$${date:yyyy-MM}/app-error-%d{MM-dd-yyyy}-%i.log.gz&quot;&gt; &lt;PatternLayout&gt; &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg %throwable{none}%n&lt;/Pattern&gt; &lt;/PatternLayout&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy /&gt; &lt;SizeBasedTriggeringPolicy size=&quot;250 MB&quot;/&gt; &lt;/Policies&gt; &lt;ThresholdFilter level=&quot;ERROR&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;/RollingFile&gt; &lt;RollingFile name=&quot;dbFileLogAppender&quot; fileName=&quot;${log.dir}/logs/db.log&quot; filePattern=&quot;${log.dir}/logs/$${date:yyyy-MM}/db-%d{MM-dd-yyyy}-%i.log.gz&quot;&gt; &lt;PatternLayout&gt; &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg %throwable{none}%n&lt;/Pattern&gt; &lt;/PatternLayout&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy /&gt; &lt;SizeBasedTriggeringPolicy size=&quot;250 MB&quot;/&gt; &lt;/Policies&gt; &lt;/RollingFile&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!-- &#x9ED8;&#x8BA4;&#x65E5;&#x5FD7;&#x7EA7;&#x522B; debug --&gt; &lt;Root level=&quot;debug&quot;&gt; &lt;!-- &#x9ED8;&#x8BA4;&#x65E5;&#x5FD7;&#x8F93;&#x51FA;&#x5230; &#x63A7;&#x5236;&#x53F0; --&gt; &lt;AppenderRef ref=&quot;Console&quot;/&gt; &lt;AppenderRef ref=&quot;appFileLog&quot; /&gt; &lt;AppenderRef ref=&quot;appErrorFileLog&quot; /&gt; &lt;/Root&gt; &lt;!-- &#x6253;&#x5370;spring info&#x65E5;&#x5FD7; --&gt; &lt;logger name=&quot;org.springframework&quot; level=&quot;info&quot; /&gt; &lt;!-- &#x6253;&#x5370;mybati info&#x65E5;&#x5FD7; --&gt; &lt;logger name=&quot;org.mybatis&quot; level=&quot;info&quot; /&gt; &lt;logger name=&quot;org.springframework.jdbc&quot; level=&quot;info&quot; &gt; &lt;AppenderRef ref=&quot;dbFileLogAppender&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.mybatis&quot; level=&quot;info&quot;&gt; &lt;AppenderRef ref=&quot;dbFileLogAppender&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;com.yfhan.dao&quot; level=&quot;debug&quot; &gt; &lt;AppenderRef ref=&quot;dbFileLogAppender&quot; /&gt; &lt;/logger&gt; &lt;/Loggers&gt;&lt;/Configuration&gt; &#x4F7F;&#x7528;java&#x65B9;&#x5F0F;&#x521D;&#x59CB;&#x5316;Log4j21234567891011121314151617181920212223242526272829303132package com.demo.utils.log;import org.apache.logging.log4j.Level;import org.apache.logging.log4j.core.LoggerContext;import org.apache.logging.log4j.core.appender.ConsoleAppender;import org.apache.logging.log4j.core.config.Configurator;import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder;import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;/*** Created by YFHan on 2016/9/21.*/public class Log4JHelper { public static void init() { ConfigurationBuilder&lt;BuiltConfiguration&gt; builder = ConfigurationBuilderFactory.newConfigurationBuilder(); builder.setStatusLevel(Level.ERROR); builder.setConfigurationName(&quot;Log4JHelper&quot;); builder.add( builder.newAppender(&quot;STDOUT&quot;, &quot;CONSOLE&quot;) .addAttribute(&quot;target&quot;, ConsoleAppender.Target.SYSTEM_OUT) .add( builder.newLayout(&quot;PatternLayout&quot;) .addAttribute(&quot;pattern&quot;, &quot;%d [%t] %-5level: %msg%n%throwable&quot;) )) .add(builder.newLogger(&quot;org.apache.logging.log4j&quot;, Level.DEBUG) .add(builder.newAppenderRef(&quot;STDOUT&quot;))) .add(builder.newRootLogger(Level.DEBUG).add(builder.newAppenderRef(&quot;STDOUT&quot;))); LoggerContext ctx = Configurator.initialize(builder.build()); }}","categories":[{"name":"log4j2","slug":"log4j2","permalink":"https://yyhan.github.io/categories/log4j2/"}],"tags":[{"name":"log4j2","slug":"log4j2","permalink":"https://yyhan.github.io/tags/log4j2/"},{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"}]},{"title":"SSH配置和使用","slug":"ssh配置和使用","date":"2017-05-16T13:18:47.000Z","updated":"2017-06-18T13:12:11.033Z","comments":true,"path":"2017/05/16/ssh配置和使用/","link":"","permalink":"https://yyhan.github.io/2017/05/16/ssh配置和使用/","excerpt":"","text":"&#x751F;&#x6210;ssh&#x5BC6;&#x94A5;&#x5728;linux&#x4E0A;&#x751F;&#x6210;&#x5728;linux&#x4E0A;&#xFF0C;&#x4F7F;&#x7528;ssh-keygen&#x547D;&#x4EE4;&#x751F;&#x6210;ssh&#x5BC6;&#x94A5;&#x3002;1ssh-keygen -t rsa &#x4F7F;&#x7528;xshell&#x751F;&#x6210;&#x5DE5;&#x5177; &gt; &#x65B0;&#x5EFA;&#x7528;&#x6237;&#x5BC6;&#x94A5;&#x751F;&#x6210;&#x5411;&#x5BFC;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x5411;&#x5BFC;&#x751F;&#x6210;&#x5BC6;&#x94A5;&#x3002; &#x90E8;&#x7F72;ssh&#x516C;&#x94A5;&#x548C;&#x79C1;&#x94A5;&#x5C06;ssh&#x516C;&#x94A5;&#x8FFD;&#x52A0;&#x5230;&#x76EE;&#x6807;&#x670D;&#x52A1;&#x5668;&#x7684;${remote_user_home}/.ssh/authorized_keys&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x5E76;&#x6307;&#x5B9A;&#x76F8;&#x5173;&#x6587;&#x4EF6;&#x6743;&#x9650;&#xFF1A; &#x6587;&#x4EF6;&#x6216;&#x76EE;&#x5F55; &#x6743;&#x9650; .ssh/ 700 .ssh/authorized_keys 600 &#x66F4;&#x591A;&#x6587;&#x4EF6;&#x6743;&#x9650;&#x8BBE;&#x7F6E;&#x53C2;&#x8003;&#xFF1A;http://man.openbsd.org/ssh.1&#x539F;&#x6587;&#x6458;&#x8981;&#x5982;&#x4E0B;&#xFF1A; &#x4F7F;&#x7528;ssh&#x767B;&#x5F55;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#x4ECE;&#x4E00;&#x53F0;linux&#x670D;&#x52A1;&#x5668;&#x767B;&#x5F55;&#x5230;&#x53E6;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;ssh&#x4ECE;&#x4E00;&#x53F0;linux&#x670D;&#x52A1;&#x5668;&#x767B;&#x5F55;&#x5230;&#x53E6;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x65F6;&#xFF0C;&#x5FC5;&#x987B;&#x5C06;&#x672C;&#x673A;&#x7684;ssh&#x516C;&#x94A5;&#x8FFD;&#x52A0;&#x5230;&#x76EE;&#x6807;&#x670D;&#x52A1;&#x5668;&#x7684;${remote_user_home}/.ssh/authorized_keys&#x6587;&#x4EF6;&#x4E2D;&#x3002;&#x540C;&#x65F6;&#x5C06;&#x79C1;&#x94A5;&#x653E;&#x7F6E;&#x5728;${local_user_home}/.ssh/id_rsa&#x6587;&#x4EF6;&#x4E2D;&#x3002;&#x5C06;&#x516C;&#x94A5;&#x53D1;&#x9001;&#x5230;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#xFF1A;1ssh-copy-id remote_user@remote_host &#x4F7F;&#x7528;ssh&#x767B;&#x5F55;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#xFF1A;1ssh remote_user@remote_host &#x4ECE;&#x4E00;&#x53F0;windows&#x670D;&#x52A1;&#x5668;&#x767B;&#x5F55;&#x5230;&#x53E6;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;xshell ssh&#x914D;&#x7F6E;&#x591A;&#x4E2A;&#x8FDC;&#x7A0B;&#x4E3B;&#x673A;&#x5F53;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x516C;&#x94A5;&#x8BBF;&#x95EE;&#x4E0D;&#x901A;&#x7684;&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668;&#x65F6;&#xFF0C;&#x5728;${local_user_home}/.ssh/config&#x6587;&#x4EF6;&#x4E2D;&#x6DFB;&#x52A0;&#x5982;&#x4E0B;&#x914D;&#x7F6E;&#xFF1A;123456789101112Host github.com HostName github.com IdentityFile D:/ssh/yyhan_github.ppk User gitHost git.coding.net HostName git.coding.net IdentityFile D:/ssh/coding_net.ppk User gitHost 192.168.1.* HostName 192.168.1.1 IdentityFile D:/ssh/root_192_168_1_1.ppk User root &#x914D;&#x7F6E;&#x9879;&#x63CF;&#x8FF0;&#x5982;&#x4E0B;&#xFF1A; &#x914D;&#x7F6E;&#x9879; &#x63CF;&#x8FF0; Host &#x4E3B;&#x673A;&#x522B;&#x540D;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6A21;&#x5F0F;&#x5339;&#x914D; HostName &#x4E3B;&#x673A;&#x771F;&#x5B9E;&#x540D;&#x79F0;&#x6216;&#x5730;&#x5740; IdentityFile &#x5BC6;&#x94A5;&#x6587;&#x4EF6;&#x5730;&#x5740; User &#x8FDC;&#x7A0B;&#x4E3B;&#x673A;&#x7528;&#x6237;&#x540D; &#x66F4;&#x591A;&#x914D;&#x7F6E;&#x53C2;&#x8003;&#xFF1A;http://man.openbsd.org/ssh_config.5 &#x9644;&#x5F55;SSH&#x5DE5;&#x5177; openSSH&#xFF08;linux&#xFF09; xShell&#xFF08;windows&#xFF09; secureCRT&#xFF08;windows&#xFF09; FileZilla&#xFF08;windows&#x548C;linux&#xFF09;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ssh&#x7684;FTP&#x5BA2;&#x6237;&#x7AEF;&#x5DE5;&#x5177;&#x53C2;&#x8003;&#x6587;&#x6863;&#x962E;&#x4E00;&#x5CF0;&#xFF1A;&#x300A;SSH&#x539F;&#x7406;&#x4E0E;&#x8FD0;&#x7528;&#xFF08;&#x4E00;&#xFF09;&#xFF1A;&#x8FDC;&#x7A0B;&#x767B;&#x5F55;&#x300B;&#x962E;&#x4E00;&#x5CF0;&#xFF1A;&#x300A;SSH&#x539F;&#x7406;&#x4E0E;&#x8FD0;&#x7528;&#xFF08;&#x4E8C;&#xFF09;&#xFF1A;&#x8FDC;&#x7A0B;&#x64CD;&#x4F5C;&#x4E0E;&#x7AEF;&#x53E3;&#x8F6C;&#x53D1;&#x300B;OpenSSh&#x5B98;&#x7F51;&#xFF1A;OpenSSH","categories":[{"name":"ssh","slug":"ssh","permalink":"https://yyhan.github.io/categories/ssh/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://yyhan.github.io/tags/ssh/"},{"name":"linux","slug":"linux","permalink":"https://yyhan.github.io/tags/linux/"},{"name":"多个远程主机","slug":"多个远程主机","permalink":"https://yyhan.github.io/tags/多个远程主机/"}]},{"title":"tomcat setenv脚本","slug":"tomcat-setenv脚本","date":"2016-12-25T15:18:56.000Z","updated":"2016-12-27T06:52:52.680Z","comments":true,"path":"2016/12/25/tomcat-setenv脚本/","link":"","permalink":"https://yyhan.github.io/2016/12/25/tomcat-setenv脚本/","excerpt":"setenv.bat(linux下是setenv.sh)文件是tomcat的自定义变量脚本文件，该脚本文件放置在CATALINA_HOME\\bin\\或CATALINA_BASE\\bin\\目录下，该文件需要用户自己创建。在该文件中可以指定java环境变量、jvm参数、catalina参数等。可以设置的参数如下： 变量名 描述 CATALINA_HOME tomcat的安装目录 CATALINA_BASE tomcat实例的工作目录 CATALINA_OPTS start、run或者debug命令执行时的Java虚拟机参数。只能被tomcat自身使用，但在stop和version命令执行时不使用。注意区分JAVA_OPTS JAVA_HOME Java开发工具安装路径，仅在使用debug参数启动时有用 JRE_HOME Java运行时安装路径，如果该参数为空，将使用JAVA_HOME的值，如果JAVA_HOME和JRE_HOME都设置了，将使用JRE_HOME JAVA_OPTS 用于执行任何命令时的Java虚拟机参数，既能被tomcat自身使用，也在stop和version命令执行时使用。注意区分CATALINA_OPTS LOGGING_CONFIG tomcat日志配置变量。例如： set LOGGING_CONFIG=&quot;-Djava.util.logging.config.file=%CATALINA_BASE%\\conf\\logging.properties&quot; LOGGING_MANAGER tomcat日志管理变量。例如： set LOGGING_MANAGER=&quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager&quot; 以上只是常用的变量，关于setenv脚本的更多详细内容请参考CATALINA_HOME\\bin\\目录下的catalina.bat或catalina.sh文件中的介绍。","text":"setenv.bat(linux&#x4E0B;&#x662F;setenv.sh)&#x6587;&#x4EF6;&#x662F;tomcat&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#x811A;&#x672C;&#x6587;&#x4EF6;&#xFF0C;&#x8BE5;&#x811A;&#x672C;&#x6587;&#x4EF6;&#x653E;&#x7F6E;&#x5728;CATALINA_HOME\\bin\\&#x6216;CATALINA_BASE\\bin\\&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x9700;&#x8981;&#x7528;&#x6237;&#x81EA;&#x5DF1;&#x521B;&#x5EFA;&#x3002;&#x5728;&#x8BE5;&#x6587;&#x4EF6;&#x4E2D;&#x53EF;&#x4EE5;&#x6307;&#x5B9A;java&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x3001;jvm&#x53C2;&#x6570;&#x3001;catalina&#x53C2;&#x6570;&#x7B49;&#x3002;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x7684;&#x53C2;&#x6570;&#x5982;&#x4E0B;&#xFF1A; &#x53D8;&#x91CF;&#x540D; &#x63CF;&#x8FF0; CATALINA_HOME tomcat&#x7684;&#x5B89;&#x88C5;&#x76EE;&#x5F55; CATALINA_BASE tomcat&#x5B9E;&#x4F8B;&#x7684;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55; CATALINA_OPTS start&#x3001;run&#x6216;&#x8005;debug&#x547D;&#x4EE4;&#x6267;&#x884C;&#x65F6;&#x7684;Java&#x865A;&#x62DF;&#x673A;&#x53C2;&#x6570;&#x3002;&#x53EA;&#x80FD;&#x88AB;tomcat&#x81EA;&#x8EAB;&#x4F7F;&#x7528;&#xFF0C;&#x4F46;&#x5728;stop&#x548C;version&#x547D;&#x4EE4;&#x6267;&#x884C;&#x65F6;&#x4E0D;&#x4F7F;&#x7528;&#x3002;&#x6CE8;&#x610F;&#x533A;&#x5206;JAVA_OPTS JAVA_HOME Java&#x5F00;&#x53D1;&#x5DE5;&#x5177;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#xFF0C;&#x4EC5;&#x5728;&#x4F7F;&#x7528;debug&#x53C2;&#x6570;&#x542F;&#x52A8;&#x65F6;&#x6709;&#x7528; JRE_HOME Java&#x8FD0;&#x884C;&#x65F6;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x53C2;&#x6570;&#x4E3A;&#x7A7A;&#xFF0C;&#x5C06;&#x4F7F;&#x7528;JAVA_HOME&#x7684;&#x503C;&#xFF0C;&#x5982;&#x679C;JAVA_HOME&#x548C;JRE_HOME&#x90FD;&#x8BBE;&#x7F6E;&#x4E86;&#xFF0C;&#x5C06;&#x4F7F;&#x7528;JRE_HOME JAVA_OPTS &#x7528;&#x4E8E;&#x6267;&#x884C;&#x4EFB;&#x4F55;&#x547D;&#x4EE4;&#x65F6;&#x7684;Java&#x865A;&#x62DF;&#x673A;&#x53C2;&#x6570;&#xFF0C;&#x65E2;&#x80FD;&#x88AB;tomcat&#x81EA;&#x8EAB;&#x4F7F;&#x7528;&#xFF0C;&#x4E5F;&#x5728;stop&#x548C;version&#x547D;&#x4EE4;&#x6267;&#x884C;&#x65F6;&#x4F7F;&#x7528;&#x3002;&#x6CE8;&#x610F;&#x533A;&#x5206;CATALINA_OPTS LOGGING_CONFIG tomcat&#x65E5;&#x5FD7;&#x914D;&#x7F6E;&#x53D8;&#x91CF;&#x3002;&#x4F8B;&#x5982;&#xFF1A; set LOGGING_CONFIG=&quot;-Djava.util.logging.config.file=%CATALINA_BASE%\\conf\\logging.properties&quot; LOGGING_MANAGER tomcat&#x65E5;&#x5FD7;&#x7BA1;&#x7406;&#x53D8;&#x91CF;&#x3002;&#x4F8B;&#x5982;&#xFF1A; set LOGGING_MANAGER=&quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager&quot; &#x4EE5;&#x4E0A;&#x53EA;&#x662F;&#x5E38;&#x7528;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5173;&#x4E8E;setenv&#x811A;&#x672C;&#x7684;&#x66F4;&#x591A;&#x8BE6;&#x7EC6;&#x5185;&#x5BB9;&#x8BF7;&#x53C2;&#x8003;CATALINA_HOME\\bin\\&#x76EE;&#x5F55;&#x4E0B;&#x7684;catalina.bat&#x6216;catalina.sh&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x4ECB;&#x7ECD;&#x3002; setenv.bat&#x6587;&#x4EF6;&#x793A;&#x4F8B;123456789101112131415@echo offecho ======== setenv start ========rem &#x8BBE;&#x7F6E;JRE&#x6839;&#x76EE;&#x5F55;set JRE_HOME=D:\\Program Files\\Java\\jdk1.8.0_102\\jrerem &#x8BBE;&#x7F6E;JAVA&#x6839;&#x76EE;&#x5F55;set JAVA_HOME=D:\\Program Files\\Java\\jdk1.8.0_102rem &#x8BBE;&#x7F6E;JAVA_OPTSset JAVA_OPTS=%JAVA_OPTS%rem &#x8BBE;&#x7F6E;CATALINA_OPTSset CATALINA_OPTS=-Dfile.encoding=UTF-8 -Duser.timezone=GMT+8echo Using JRE_HOME: %JRE_HOME%echo Using JAVA_HOME: %JAVA_HOME%echo Using JAVA_OPTS: %JAVA_OPTS%echo Using CATALINA_OPTS: %CATALINA_OPTS%echo ======== setenv over ======== &#x5173;&#x4E8E;CATALINA_HOME &#x548C; CATALINA_BASECATALINA_HOME&#x662F;tomcat&#x7684;&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#xFF0C;CATALINA_BASE&#x662F;tomcat&#x5B9E;&#x4F8B;&#x7684;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x3002;&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x4F8B;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;&#x3002; CATALINA_BASE&#x5305;&#x542B;&#x4EE5;&#x4E0B;&#x76EE;&#x5F55;&#x548C;&#x6587;&#x4EF6;&#xFF1A; bin - &#x53EA;&#x5305;&#x542B;&#x4EE5;&#x4E0B;&#x6587;&#x4EF6;: * setenv.sh (*nix) or setenv.bat (Windows), * tomcat-juli.jar The setenv scripts were described above. The tomcat-juli library is documented in the Logging chapter in the User Guide. conf - &#x670D;&#x52A1;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x76EE;&#x5F55; (including server.xml) lib - &#x5E93;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#x3002;&#x5EFA;&#x8BAE;&#x5C06;&#x81EA;&#x5DF1;&#x7684;&#x548C;&#x7B2C;&#x4E09;&#x65B9;&#x7684;&#x5E93;&#x6587;&#x4EF6;&#x653E;&#x7F6E;&#x5728;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B; logs - &#x65E5;&#x5FD7;&#x548C;&#x8F93;&#x51FA;&#x76EE;&#x5F55; webapps - &#x81EA;&#x52A8;&#x52A0;&#x8F7D;&#x7684;web&#x5E94;&#x7528;&#x76EE;&#x5F55; work - web&#x5E94;&#x7528;&#x7684;&#x4E34;&#x65F6;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55; temp - JVM&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#x76EE;&#x5F55;(java.io.tmpdir) CATALINA_HOME&#x5305;&#x542B;&#x4EE5;&#x4E0B;&#x76EE;&#x5F55;&#x548C;&#x6587;&#x4EF6;&#xFF1A; bin - &#x542F;&#x52A8;&#x548C;&#x5173;&#x95ED;&#x811A;&#x672C;&#x6587;&#x4EF6;&#x76EE;&#x5F55; &#x5F53;&#x4EE5;&#x4E0B;&#x6587;&#x4EF6;&#x4E0D;&#x5728;`CATALINA_BASE/bin`&#x76EE;&#x5F55;&#x65F6;&#x5C06;&#x4F1A;&#x88AB;&#x4F7F;&#x7528;: setenv.sh (*nix), setenv.bat (Windows), tomcat-juli.jar lib - &#x5E93;&#x6587;&#x4EF6;&#x76EE;&#x5F55;&#x3002;&#x5EFA;&#x8BAE;&#x53EA;&#x653E;&#x7F6E;&#x6807;&#x51C6;tomcat&#x5E93;&#x6587;&#x4EF6; &#x5173;&#x4E8E;CATALINA_HOME &#x548C; CATALINA_BASE&#x53EF;&#x4EE5;&#x53C2;&#x8003;RUNNING.txt&#x5176;&#x4E2D;&#x5173;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x539F;&#x6587;&#x63CF;&#x8FF0;&#x5982;&#x4E0B;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354==================================================Advanced Configuration - Multiple Tomcat Instances==================================================In many circumstances, it is desirable to have a single copy of a Tomcatbinary distribution shared among multiple users on the same server. To makethis possible, you can set the CATALINA_BASE environment variable to thedirectory that contains the files for your &apos;personal&apos; Tomcat instance.When running with a separate CATALINA_HOME and CATALINA_BASE, the filesand directories are split as following:In CATALINA_BASE: * bin - Only the following files: * setenv.sh (*nix) or setenv.bat (Windows), * tomcat-juli.jar The setenv scripts were described above. The tomcat-juli library is documented in the Logging chapter in the User Guide. * conf - Server configuration files (including server.xml) * lib - Libraries and classes, as explained below * logs - Log and output files * webapps - Automatically loaded web applications * work - Temporary working directories for web applications * temp - Directory used by the JVM for temporary files (java.io.tmpdir)In CATALINA_HOME: * bin - Startup and shutdown scripts The following files will be used only if they are absent in CATALINA_BASE/bin: setenv.sh (*nix), setenv.bat (Windows), tomcat-juli.jar * lib - Libraries and classes, as explained belowIn the default configuration the JAR libraries and classes both inCATALINA_BASE/lib and in CATALINA_HOME/lib will be added to the commonclasspath, but the ones in CATALINA_BASE will be added first and thus willbe searched first.The idea is that you may leave the standard Tomcat libraries inCATALINA_HOME/lib and add other ones such as database drivers intoCATALINA_BASE/lib.","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://yyhan.github.io/tags/tomcat/"},{"name":"setenv","slug":"setenv","permalink":"https://yyhan.github.io/tags/setenv/"}]},{"title":"hadoop集群搭建","slug":"hadoop集群搭建","date":"2016-12-22T03:29:20.000Z","updated":"2017-06-18T13:06:35.850Z","comments":true,"path":"2016/12/22/hadoop集群搭建/","link":"","permalink":"https://yyhan.github.io/2016/12/22/hadoop集群搭建/","excerpt":"","text":"&#x7CFB;&#x7EDF;&#x53CA;&#x8F6F;&#x4EF6;&#x7248;&#x672C; ubuntu server 16.10 jdk 1.8.0_111 hadoop 2.7.3 &#x96C6;&#x7FA4;&#x914D;&#x7F6E;IP&#x53CA;&#x57DF;&#x540D;&#x5206;&#x914D; &#x4E3B;&#x673A;&#x540D; ip master 192.168.2.100 slave1 192.168.2.101 slave2 192.168.2.102 &#x96C6;&#x7FA4;&#x642D;&#x5EFA;&#x5728;VM&#x865A;&#x62DF;&#x673A;&#x4E0A;&#xFF0C;&#x5404;&#x865A;&#x62DF;&#x673A;&#x91C7;&#x7528;nat&#x65B9;&#x5F0F;&#x8FDE;&#x63A5;&#xFF0C;&#x5B50;&#x7F51;ip&#xFF1A;192.168.2.0&#xFF0C;&#x4E3B;&#x673A;&#x540D;&#x914D;&#x7F6E;&#x5728;&#x5404;&#x865A;&#x62DF;&#x673A;host&#x6587;&#x4EF6;&#x4E2D;&#x3002;&#xFF08;&#x63D0;&#x793A;&#xFF1A;&#x4E00;&#x53F0;&#x673A;&#x5668;&#x914D;&#x7F6E;&#x597D;&#x540E;&#xFF0C;&#x590D;&#x5236;&#x4E09;&#x4EFD;&#x5373;&#x53EF;&#xFF09;&#x4F7F;&#x7528;&#x865A;&#x62DF;&#x673A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6CE8;&#x610F;&#x8981;&#x5C06;&#x865A;&#x62DF;&#x673A;&#x6539;&#x4E3A;&#x9759;&#x6001;ip&#xFF0C;&#x907F;&#x514D;&#x91CD;&#x542F;&#x540E;ip&#x6539;&#x53D8;&#xFF0C;&#x5BFC;&#x81F4;host&#x914D;&#x7F6E;&#x5931;&#x6548;&#x3002; &#x7528;&#x6237;&#x5355;&#x72EC;&#x5EFA;&#x7ACB;hadoop&#x7528;&#x6237;&#xFF0C;&#x7528;&#x4E8E;&#x8FD0;&#x884C;hadoop&#x8FDB;&#x7A0B; &#x8F6F;&#x4EF6;&#x5B89;&#x88C5;jdk &#x548C; Hadoop&#x5B89;&#x88C5;jdk&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#xFF1A;/usr/bin/java/jdk1.8.0_111Hadoop&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#xFF1A;/home/hadoop/hadoop/hadoop-2.7.3(hadoop&#x7528;&#x6237;&#x7684;&#x4E3B;&#x76EE;&#x5F55;&#x5373;&#x53EF;)&#x5728;/etc/profile&#x6587;&#x4EF6;&#x4E2D;&#x8FFD;&#x52A0;&#x4EE5;&#x4E0B;&#x4EE3;&#x7801;&#xFF1A;1234export JAVA_HOME=/usr/bin/java/jdk1.8.0_111export JRE_HOME=$JAVA_HOME/jreexport HADOOP_HOME=/home/hadoop/hadoop/hadoop-2.7.3export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$HADOOP_HOME/bin Hadoop&#x914D;&#x7F6E;Hadoop&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x90FD;&#x5728;$HADOOP_HOME/etc/hadoop &#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x4EE5;&#x4E0B;&#x64CD;&#x4F5C;&#x5747;&#x5728;&#x8BE5;&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x3002; hadoop-env.sh&#x627E;&#x5230;&#x8BE5;&#x6587;&#x4EF6;&#x91CC;&#x7684;JAVA_HOME&#x914D;&#x7F6E;&#x9879;&#xFF0C;&#x5E76;&#x6307;&#x5B9A;jdk&#x7684;&#x7EDD;&#x5BF9;&#x8DEF;&#x5F84;&#xFF08;&#x5FC5;&#x987B;&#x662F;&#x7EDD;&#x5BF9;&#x8DEF;&#x5F84;&#xFF09;:1export JAVA_HOME=/usr/bin/java/jdk1.8.0_111 core-site.xml12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/hadoop/tmp&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://master:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; hdfs-site.xml123456789101112131415161718192021222324252627&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.http-address&lt;/name&gt; &lt;value&gt;master:50070&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;slave1:50070&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;2&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.data.dir&lt;/name&gt; &lt;value&gt;file:/home/hadoop/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.permissions.enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; mapred-site.xml&#x8BE5;&#x6587;&#x4EF6;&#x5728;&#x539F;&#x59CB;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x91CC;&#x6CA1;&#x6709;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;mv mapred-site.xml.template mapred-site.xml&#x521B;&#x5EFA;&#x3002;1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;master:10020&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;master:19888&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; yarn-site.xml1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;master&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-service&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-service.mapreduce.shuffle.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; masters&#x8BE5;&#x6587;&#x4EF6;&#x7528;&#x4E8E;&#x914D;&#x7F6E;&#x4E3B;&#x8282;&#x70B9;&#x4FE1;&#x606F;&#xFF0C;&#x6BCF;&#x884C;&#x914D;&#x7F6E;&#x4E00;&#x4E2A;&#x4E3B;&#x673A;&#x540D;&#x79F0;&#x3002;&#x8BE5;&#x6587;&#x4EF6;&#x5728;&#x539F;&#x59CB;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x91CC;&#x6CA1;&#x6709;&#xFF0C;&#x9700;&#x8981;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x3002;1slave1 slaves&#x8BE5;&#x6587;&#x4EF6;&#x7528;&#x4E8E;&#x914D;&#x7F6E;&#x4ECE;&#x8282;&#x70B9;&#x4FE1;&#x606F;&#xFF0C;&#x6BCF;&#x884C;&#x914D;&#x7F6E;&#x4E00;&#x4E2A;&#x4E3B;&#x673A;&#x540D;&#x79F0;&#x3002;12slave1slave2 &#x4EE5;&#x4E0A;&#x914D;&#x7F6E;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x5C06;&#x865A;&#x62DF;&#x673A;&#x590D;&#x5236;&#x4E24;&#x4EFD;&#xFF0C;&#x5E76;&#x5C06;ip&#xFF0C;&#x5206;&#x522B;&#x6307;&#x5B9A;&#x4E3A;192.168.2.101&#x548C;192.168.2.102&#x3002; ssh&#x914D;&#x7F6E;&#x751F;&#x6210;ssh&#x5BC6;&#x94A5;&#xFF0C;&#x6267;&#x884C;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#xFF0C;&#x4E00;&#x8DEF;&#x56DE;&#x8F66;&#x5373;&#x53EF;&#x3002;1ssh-keygen -t rsa &#x5C06;&#x516C;&#x94A5;&#x62F7;&#x8D1D;&#x5230;&#x5176;&#x5B83;&#x673A;&#x5668;&#x4E0A;&#xFF0C;&#x5B9E;&#x73B0;&#x514D;&#x5BC6;&#x7801;&#x767B;&#x5F55;&#xFF1A;123ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2 &#x8FD9;&#x6837;&#x4F1A;&#x5728;&#x6BCF;&#x53F0;&#x673A;&#x5668;&#x7684;hadoop&#x7528;&#x6237;&#x4E3B;&#x76EE;&#x5F55;&#x4E0B;&#x7684;.ssh&#x76EE;&#x5F55;&#x4E0B;&#x751F;&#x6210;&#x4E00;&#x4E2A;authorized_keys&#x6587;&#x4EF6;&#xFF0C;&#x8BE5;&#x6587;&#x4EF6;&#x5C31;&#x8BB0;&#x5F55;&#x4E86;&#x521A;&#x624D;&#x751F;&#x6210;&#x7684;&#x516C;&#x94A5;&#x5185;&#x5BB9;&#x3002; &#x542F;&#x52A8;&#x4F7F;&#x7528;hadoop&#x7528;&#x6237;&#x767B;&#x5F55;&#x3002;&#x7B2C;&#x4E00;&#x6B21;&#x542F;&#x52A8;&#x9700;&#x8981;&#x683C;&#x5F0F;&#x5316;&#xFF0C;&#x5728;$HADOOP_HOME&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;:1./bin/hdfs namenode -format &#x542F;&#x52A8;hdfs&#xFF1A;1./sbin/start-dfs.sh &#x542F;&#x52A8;hdfs&#x547D;&#x4EE4;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x663E;&#x793A;&#x5982;&#x4E0B;&#xFF1A;123456Starting namenodes on [master]master: starting namenode, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/hadoop-hadoop-namenode-ubuntu.outslave1: starting datanode, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/hadoop-hadoop-datanode-ubuntu.outslave2: starting datanode, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/hadoop-hadoop-datanode-ubuntu.outStarting secondary namenodes [slave1]slave1: starting secondarynamenode, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/hadoop-hadoop-secondarynamenode-ubuntu.out &#x542F;&#x52A8;yarn&#xFF1A;1./sbin/start-yarn.sh &#x542F;&#x52A8;yarn&#x547D;&#x4EE4;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x663E;&#x793A;&#x5982;&#x4E0B;&#xFF1A;1234starting yarn daemonsstarting resourcemanager, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/yarn-hadoop-resourcemanager-ubuntu.outslave1: starting nodemanager, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/yarn-hadoop-nodemanager-ubuntu.outslave2: starting nodemanager, logging to /home/hadoop/hadoop/hadoop-2.7.3/logs/yarn-hadoop-nodemanager-ubuntu.out &#x4F7F;&#x7528;jps&#x547D;&#x4EE4;&#x67E5;&#x770B;&#x8FDB;&#x7A0B;&#x662F;&#x5426;&#x542F;&#x52A8;&#xFF0C;&#x663E;&#x793A;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x8868;&#x793A;&#x542F;&#x52A8;&#x6210;&#x529F;&#xFF1A;1231257 NameNode1530 ResourceManager1787 Jps &#x901A;&#x8FC7;&#x6D4F;&#x89C8;&#x5668;&#x67E5;&#x770B;hdfs&#xFF1A;192.168.2.100:50070 &#x901A;&#x8FC7;&#x6D4F;&#x89C8;&#x5668;&#x67E5;&#x770B;yarn&#xFF1A;192.168.2.100:8088 &#x7ED3;&#x675F;&#x3002;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://yyhan.github.io/tags/hadoop/"}]},{"title":"java图片压缩","slug":"java图片压缩","date":"2016-12-20T03:07:39.000Z","updated":"2016-12-20T03:08:34.701Z","comments":true,"path":"2016/12/20/java图片压缩/","link":"","permalink":"https://yyhan.github.io/2016/12/20/java图片压缩/","excerpt":"","text":"12","categories":[{"name":"代码示例","slug":"代码示例","permalink":"https://yyhan.github.io/categories/代码示例/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"图片","slug":"图片","permalink":"https://yyhan.github.io/tags/图片/"}]},{"title":"HttpClient库使用示例","slug":"HttpClient库使用示例","date":"2016-12-12T14:42:31.000Z","updated":"2016-12-12T15:08:10.980Z","comments":true,"path":"2016/12/12/HttpClient库使用示例/","link":"","permalink":"https://yyhan.github.io/2016/12/12/HttpClient库使用示例/","excerpt":"","text":"HttpClient&#x662F;apache common&#x4E0B;&#x7684;&#x5B50;&#x9879;&#x76EE;&#xFF0C;&#x7528;&#x6765;&#x63D0;&#x4F9B;&#x9AD8;&#x6548;&#x7684;&#x3001;&#x529F;&#x80FD;&#x4E30;&#x5BCC;&#x7684;&#x652F;&#x6301;Http&#x534F;&#x8BAE;&#x7684;&#x5BA2;&#x6237;&#x7AEF;&#x7F16;&#x7A0B;&#x5DE5;&#x5177;&#x5305;&#x3002; &#x5B98;&#x7F51; &#x4F9D;&#x8D56;&#x7248;&#x672C;&#xFF1A;12345678910&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpclient&lt;/artifactId&gt; &lt;version&gt;4.5.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt; &lt;artifactId&gt;httpcore&lt;/artifactId&gt; &lt;version&gt;4.4.3&lt;/version&gt;&lt;/dependency&gt; &#x4EE3;&#x7801;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204package com.demo.utils.lang;import org.apache.commons.lang3.CharEncoding;import org.apache.http.HttpEntity;import org.apache.http.HttpException;import org.apache.http.HttpStatus;import org.apache.http.StatusLine;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.methods.RequestBuilder;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.util.EntityUtils;import java.io.IOException;import java.util.Map;/*** Created by hyf on 2016/8/31.*/public class HttpUtil { private CloseableHttpClient httpClient; private static HttpUtil ourInstance = new HttpUtil(); public static HttpUtil getInstance() { return ourInstance; } private HttpUtil() { httpClient = HttpClients.createDefault(); } private CloseableHttpClient getHttpClient() { return this.httpClient; } /** * &#x53D1;&#x9001;get&#x8BF7;&#x6C42; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @return * @throws IOException * @throws ClientProtocolException */ public String get(String uri) throws HttpException, IOException { CloseableHttpResponse response = null; HttpEntity entity = null; try { response = getHttpClient().execute(new HttpGet(uri)); StatusLine statusLine = response.getStatusLine(); if (statusLine.getStatusCode() == HttpStatus.SC_OK) { return EntityUtils.toString(response.getEntity()); } else { throw new HttpException(statusLine.toString()); } } finally { try { if (entity != null) { EntityUtils.consume(entity); } } catch (IOException e) { e.printStackTrace(); } try { if (response != null) { response.close(); } } catch (IOException e) { e.printStackTrace(); } } } /** * get&#x65B9;&#x5F0F;&#x53D1;&#x9001;form&#x8868;&#x5355; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @param parameters &#x8868;&#x5355;&#x53C2;&#x6570; * @return * @throws Exception */ public String get(String uri, Map&lt;String, ?&gt; parameters) throws HttpException, IOException { return send(uri, parameters, HttpGet.METHOD_NAME); } /** * post&#x65B9;&#x5F0F;&#x53D1;&#x9001;form&#x8868;&#x5355; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @param parameters &#x8868;&#x5355;&#x53C2;&#x6570; * @return * @throws Exception */ public String post(String uri, Map&lt;String, ?&gt; parameters) throws HttpException, IOException { return send(uri, parameters, HttpPost.METHOD_NAME); } /** * post&#x65B9;&#x5F0F;&#x53D1;&#x9001;form&#x8868;&#x5355; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @param parameters &#x8868;&#x5355;&#x53C2;&#x6570; * @return * @throws Exception */ public String send(String uri, Map&lt;String, ?&gt; parameters, final String method) throws HttpException, IOException { CloseableHttpResponse response = null; HttpEntity entity = null; try { RequestBuilder builder = RequestBuilder.create(method).setUri(uri); for (String k : parameters.keySet()) { Object v = parameters.get(k); if (v == null) { builder.addParameter(k, &quot;&quot;); } else { builder.addParameter(k, v.toString()); } } response = getHttpClient().execute(builder.build()); StatusLine statusLine = response.getStatusLine(); if (statusLine.getStatusCode() == HttpStatus.SC_OK) { return EntityUtils.toString(response.getEntity()); } else { throw new HttpException(statusLine.toString()); } } finally { try { if (entity != null) { EntityUtils.consume(entity); } } catch (IOException e) { e.printStackTrace(); } try { if (response != null) { response.close(); } } catch (IOException e) { e.printStackTrace(); } } } /** * &#x6839;&#x636E;request&#x548C;uri&#x83B7;&#x5F97;&#x54CD;&#x5E94;&#x4FE1;&#x606F;,&#x4F7F;&#x7528;post&#x65B9;&#x5F0F;&#x83B7;&#x53D6;,&#x4F7F;&#x7528;UTF-8&#x7F16;&#x7801; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @param bodyTxt http&#x8BF7;&#x6C42;body&#x5185;&#x5BB9; * @return * @throws IOException */ public String post(String uri, String bodyTxt) throws IOException, HttpException { return post(uri, bodyTxt, CharEncoding.UTF_8); } /** * &#x53D1;&#x9001;post&#x8BF7;&#x6C42; * * @param uri &#x8BF7;&#x6C42;&#x5730;&#x5740; * @param bodyTxt http&#x8BF7;&#x6C42;body&#x5185;&#x5BB9; * @param encoding &#x7F16;&#x7801;&#x7C7B;&#x578B; * @return * @throws IOException * @throws HttpException */ public String post(String uri, String bodyTxt, String encoding) throws IOException, HttpException { CloseableHttpResponse response = null; HttpEntity entity = null; try { response = getHttpClient().execute( RequestBuilder.post(uri) .setEntity(new StringEntity(bodyTxt, encoding)) .build()); StatusLine statusLine = response.getStatusLine(); if (statusLine.getStatusCode() == HttpStatus.SC_OK) { entity = response.getEntity(); return EntityUtils.toString(entity); } else { throw new HttpException(statusLine.toString()); } } finally { try { if (entity != null) { EntityUtils.consume(entity); } } catch (IOException e) { e.printStackTrace(); } try { if (response != null) { response.close(); } } catch (IOException e) { e.printStackTrace(); } } }}","categories":[{"name":"代码示例","slug":"代码示例","permalink":"https://yyhan.github.io/categories/代码示例/"}],"tags":[{"name":"HttpClient","slug":"HttpClient","permalink":"https://yyhan.github.io/tags/HttpClient/"},{"name":"http","slug":"http","permalink":"https://yyhan.github.io/tags/http/"}]},{"title":"idea乱码问题","slug":"idea乱码问题","date":"2016-12-12T13:02:58.000Z","updated":"2016-12-12T13:42:40.192Z","comments":true,"path":"2016/12/12/idea乱码问题/","link":"","permalink":"https://yyhan.github.io/2016/12/12/idea乱码问题/","excerpt":"","text":"idea&#x4E71;&#x7801;&#x95EE;&#x9898;&#x4E3B;&#x8981;&#x6D89;&#x53CA;&#x51E0;&#x4E2A;&#x65B9;&#x9762;&#xFF1A; idea&#x542F;&#x52A8;&#x65F6;&#x7684;java&#x865A;&#x62DF;&#x673A;&#x7F16;&#x7801; java&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#x7F16;&#x7801; maven&#x547D;&#x4EE4;&#x8FD0;&#x884C;&#x65F6;&#xFF08;&#x7F16;&#x8BD1;&#x3001;&#x6253;&#x5305;&#x7B49;&#xFF09;&#x7F16;&#x7801; java&#x9879;&#x76EE;&#x8FD0;&#x884C;&#x65F6;&#xFF08;&#x5728;idea&#x4E2D;&#x8FD0;&#x884C;&#xFF09;&#x7F16;&#x7801; &#x8FD9;&#x51E0;&#x4E2A;&#x70B9;&#x4E5F;&#x4F1A;&#x4E92;&#x76F8;&#x5F71;&#x54CD;&#xFF0C;&#x4E0D;&#x4E00;&#x5B9A;&#x8BF4;&#x5355;&#x72EC;&#x6539;&#x4E86;&#x54EA;&#x4E2A;&#x914D;&#x7F6E;&#x80FD;&#x89E3;&#x51B3;&#x4E71;&#x7801;&#x95EE;&#x9898;&#xFF0C;&#x6700;&#x597D;&#x662F;&#x7EDF;&#x4E00;&#x6240;&#x6709;&#x7F16;&#x7801;&#x4E3A;UTF-8&#x3002; &#x5728;windows&#x4E0B;&#xFF0C;git&#x548C;kdiff3(git&#x9ED8;&#x8BA4;&#x7684;&#x5BF9;&#x6BD4;&#x5DE5;&#x5177;)&#x7684;&#x9ED8;&#x8BA4;&#x7F16;&#x7801;&#x4E3A;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7F16;&#x7801;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;git&#x89E3;&#x51B3;&#x51B2;&#x7A81;&#x7684;&#x8BDD;&#xFF0C;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x6539;&#x6389;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x6CE8;&#x610F;&#x4FEE;&#x6539;git&#x548C;kdiff3&#x7684;&#x7F16;&#x7801;&#x4E3A;UTF-8 1. idea&#x542F;&#x52A8;&#x65F6;&#x7684;java&#x865A;&#x62DF;&#x673A;&#x7F16;&#x7801;&#x73B0;&#x8C61;: &#x63A7;&#x5236;&#x53F0;&#x4E71;&#x7801; &#x89E3;&#x51B3;&#xFF1A;&#x627E;&#x5230;IDEA_HOME\\bin\\idea.exe.vmoptions&#x6216;IDEA_HOME\\bin\\idea64.exe.vmoptions&#xFF0C;&#x8FFD;&#x52A0;&#x4EE5;&#x4E0B;&#x914D;&#x7F6E;&#xFF1A;1-Dfile.encoding=UTF-8 2. java&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x73B0;&#x8C61;: java&#x6E90;&#x4EE3;&#x7801;&#x5408;&#x5E76;&#x3001;&#x6216;&#x7528;&#x5176;&#x5B83;&#x7F16;&#x8F91;&#x5668;&#x6253;&#x5F00;&#x65F6;&#x51FA;&#x73B0;&#x4E71;&#x7801; &#x89E3;&#x51B3;&#xFF1A; &#x5C06;&#x5DF2;&#x6709;&#x7684;java&#x6E90;&#x7801;&#x6587;&#x4EF6;&#x5168;&#x90E8;&#x6539;&#x6210;UTF-8&#x7F16;&#x7801; File -&gt; Settings -&gt; Editor -&gt; File Encodings &#x8FDB;&#x884C;&#x4EE5;&#x4E0B;&#x8BBE;&#x7F6E;&#xFF08;&#x4FDD;&#x8BC1;&#x4EE5;&#x540E;&#x65B0;&#x6DFB;&#x52A0;&#x7684;&#x6587;&#x4EF6;&#x7F16;&#x7801;&#x90FD;&#x662F;UTF-8&#x7F16;&#x7801;&#xFF09;&#xFF1A; IDE Encoding : UTF-8 Project Encoding : UTF-8 Default encoding for properties files : UTF-8 3. maven&#x547D;&#x4EE4;&#x8FD0;&#x884C;&#x65F6;&#xFF08;&#x7F16;&#x8BD1;&#x3001;&#x6253;&#x5305;&#x7B49;&#xFF09;&#x7F16;&#x7801;&#x73B0;&#x8C61;: &#x6267;&#x884C;maven&#x547D;&#x4EE4;&#x65F6;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x4E71;&#x7801; &#x89E3;&#x51B3;&#xFF1A;&#x5728;pom.xml&#x6587;&#x4EF6;&#x4E2D;&#x914D;&#x7F6E;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;build&gt; &lt;plugins&gt; &lt;!-- &#x6307;&#x5B9A;maven&#x7F16;&#x8BD1;&#x65F6;&#x7684;java&#x7248;&#x672C; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x6307;&#x5B9A;maven&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7F16;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x89E3;&#x51B3;maven test&#x547D;&#x4EE4;&#x65F6;console&#x51FA;&#x73B0;&#x4E2D;&#x6587;&#x4E71;&#x7801;&#x4E71;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19.1 &lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt; &lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt; &lt;version&gt;2.19.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;configuration&gt; &lt;argLine&gt;-Dfile.encoding=UTF-8&lt;/argLine&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;forkMode&gt;never&lt;/forkMode&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x6307;&#x5B9A;maven&#x6253;war&#x5305;&#x65F6;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7F16;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;configuration&gt; &lt;resourceEncoding&gt;UTF-8&lt;/resourceEncoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 4. java&#x9879;&#x76EE;&#x8FD0;&#x884C;&#x65F6;&#xFF08;&#x5728;idea&#x4E2D;&#x8FD0;&#x884C;&#xFF09;&#x7F16;&#x7801;&#x73B0;&#x8C61;: &#x8FD0;&#x884C;java&#x9879;&#x76EE;&#x65F6;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x4E71;&#x7801;&#xFF08;&#x4F7F;&#x7528;tomcat&#x65F6;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x9875;&#x9762;&#x4E71;&#x7801;&#xFF09; &#x89E3;&#x51B3;&#xFF1A;&#x5728;java&#x9879;&#x76EE;&#x7684;Run/Debug Configurations&#x7684;VM options&#x4E2D;&#x6DFB;&#x52A0;&#x4EE5;&#x4E0B;&#x6307;&#x4EE4;&#xFF1A;1-Dfile.encoding=UTF-8","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://yyhan.github.io/tags/idea/"},{"name":"乱码","slug":"乱码","permalink":"https://yyhan.github.io/tags/乱码/"}]},{"title":"hexo搭建博客教程汇总","slug":"hexo搭建博客教程汇总","date":"2016-12-12T12:39:23.000Z","updated":"2016-12-12T12:59:24.461Z","comments":true,"path":"2016/12/12/hexo搭建博客教程汇总/","link":"","permalink":"https://yyhan.github.io/2016/12/12/hexo搭建博客教程汇总/","excerpt":"","text":"&#x4E00;&#x76F4;&#x60F3;&#x505A;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x4F46;&#x662F;&#x81EA;&#x5DF1;&#x8D70;&#x7684;&#x662F;java&#x8DEF;&#x7EBF;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x4F1A;&#x7528;php&#x653E;&#x5F03;&#x4E86;WordPress&#xFF0C;&#x56E0;&#x4E3A;&#x89C9;&#x5F97;jekyll&#x73AF;&#x5883;&#x642D;&#x5EFA;&#x9EBB;&#x70E6;&#x800C;&#x653E;&#x5F03;&#x4E86;jekyll&#x3002;&#x4E2D;&#x95F4;&#x5C1D;&#x8BD5;&#x8FC7;&#x81EA;&#x5DF1;&#x5199;&#x9759;&#x6001;&#x7AD9;&#x70B9;&#xFF0C;&#x901A;&#x8FC7;&#x5F02;&#x6B65;&#x52A0;&#x8F7D;markdown&#x6587;&#x6863;&#xFF0C;&#x4F7F;&#x7528;&#x6D4F;&#x89C8;&#x5668;&#x6E32;&#x67D3;&#x7684;&#x65B9;&#x5F0F;&#x5448;&#x73B0;&#x535A;&#x5BA2;&#x3002;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x9700;&#x8981;&#x7EAF;&#x624B;&#x5DE5;&#x5199;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x5206;&#x9875;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x6458;&#x8981;&#xFF0C;&#x800C;&#x4E2D;&#x9014;&#x653E;&#x5F03;&#x4F7F;&#x7528;&#x3002;&#x540E;&#x6765;&#x770B;&#x5230;&#x4E86;hexo&#x535A;&#x5BA2;&#x7CFB;&#x7EDF;&#xFF08;&#x53EA;&#x9700;&#x8981;&#x4F9D;&#x8D56;nodejs&#xFF0C;&#x5F3A;&#x8FEB;&#x60A3;&#x8005;&#x53EA;&#x559C;&#x6B22;&#x4F9D;&#x8D56;&#x5C11;&#x7684;&#x4EA7;&#x54C1;^_^&#xFF09;&#xFF0C;&#x8FD9;&#x4E24;&#x5929;&#x5C31;&#x5F00;&#x59CB;&#x6298;&#x817E;hexo&#x3002;&#x672C;&#x60F3;&#x5199;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#xFF0C;&#x5206;&#x4EAB;&#x4E0B;&#x6298;&#x817E;&#x7ECF;&#x9A8C;&#xFF0C;&#x7136;&#x800C;&#x53D1;&#x73B0;&#x7F51;&#x4E0A;&#x5DF2;&#x6709;&#x5F88;&#x591A;&#x540C;&#x5B66;&#x5206;&#x4EAB;&#x975E;&#x5E38;&#x8BE6;&#x7EC6;&#x7684;&#x6559;&#x7A0B;&#xFF0C;&#x5C31;&#x4E0D;&#x518D;&#x91CD;&#x590D;&#x9020;&#x8F6E;&#x5B50;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x5217;&#x51FA;&#xFF0C;&#x6298;&#x817E;&#x8FC7;&#x7A0B;&#x4E2D;&#x53C2;&#x8003;&#x7684;&#x6559;&#x7A0B;&#x6216;&#x7F51;&#x7AD9;&#xFF0C;&#x4F9B;&#x5404;&#x4F4D;&#x53C2;&#x8003;&#x3002; Xuanwo&#x2019;s Blog&#x53F2;&#x4E0A;&#x6700;&#x8BE6;&#x7EC6;&#x7684;Hexo&#x535A;&#x5BA2;&#x642D;&#x5EFA;&#x56FE;&#x6587;&#x6559;&#x7A0B; &#x5C60;&#x592B;9441&#x7684;&#x535A;&#x5BA2;&#x5927;&#x9053;&#x81F3;&#x7B80;&#x2014;&#x2014;Hexo&#x7B80;&#x6D01;&#x4E3B;&#x9898;&#x63A8;&#x8350; hexo&#x5B98;&#x7F51;&#x6587;&#x6863; &#x6DD8;&#x5B9D;NPM&#x955C;&#x50CF; npm&#x5B98;&#x65B9;&#x6587;&#x6863; git","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://yyhan.github.io/tags/hexo/"},{"name":"博客系统","slug":"博客系统","permalink":"https://yyhan.github.io/tags/博客系统/"}]},{"title":"maven常用命令","slug":"maven常用命令","date":"2016-12-12T12:26:51.000Z","updated":"2016-12-12T12:36:50.471Z","comments":true,"path":"2016/12/12/maven常用命令/","link":"","permalink":"https://yyhan.github.io/2016/12/12/maven常用命令/","excerpt":"","text":"mvn package -DskipTests &#x8DF3;&#x8FC7;&#x6D4B;&#x8BD5;&#x6B65;&#x9AA4;&#x6253;&#x5305;&#x3002; mvn package -Dmaven.test.skip=true &#x8DF3;&#x8FC7;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x7F16;&#x8BD1;&#x548C;&#x6267;&#x884C;&#x6B65;&#x9AA4;&#x6253;&#x5305;&#x3002; mvn compile &#x7F16;&#x8BD1;java&#x4EE3;&#x7801;&#xFF0C;&#x62F7;&#x8D1D;&#x7F16;&#x8BD1;&#x7ED3;&#x679C;&#x548C;resources&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6587;&#x4EF6;&#x5230;target/classes&#x76EE;&#x5F55;&#x4E0B;&#x3002; mvn clean &#x6E05;&#x7406;&#x7F16;&#x8BD1;&#x548C;&#x6253;&#x5305;&#x7ED3;&#x679C;&#xFF0C;&#x5220;&#x9664;target&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x3002; mvn clean package &#x6E05;&#x7406;&#x7F16;&#x8BD1;&#x548C;&#x6253;&#x5305;&#x7ED3;&#x679C;&#x5E76;&#x6253;&#x5305;&#x3002;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://yyhan.github.io/tags/maven/"},{"name":"mvn","slug":"mvn","permalink":"https://yyhan.github.io/tags/mvn/"}]},{"title":"maven常用配置","slug":"maven常用配置","date":"2016-12-12T12:14:31.000Z","updated":"2017-06-06T15:16:44.467Z","comments":true,"path":"2016/12/12/maven常用配置/","link":"","permalink":"https://yyhan.github.io/2016/12/12/maven常用配置/","excerpt":"介绍maven常用的配置，乱码问题处理，常用指令介绍等。","text":"&#x4ECB;&#x7ECD;maven&#x5E38;&#x7528;&#x7684;&#x914D;&#x7F6E;&#xFF0C;&#x4E71;&#x7801;&#x95EE;&#x9898;&#x5904;&#x7406;&#xFF0C;&#x5E38;&#x7528;&#x6307;&#x4EE4;&#x4ECB;&#x7ECD;&#x7B49;&#x3002; maven scope&#x8BF4;&#x660E; compile&#xFF0C;&#x7F3A;&#x7701;&#x503C;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x9636;&#x6BB5;&#xFF0C;&#x4F1A;&#x968F;&#x7740;&#x9879;&#x76EE;&#x4E00;&#x8D77;&#x53D1;&#x5E03;&#x3002; provided&#xFF0C;&#x7C7B;&#x4F3C;compile&#xFF0C;&#x671F;&#x671B;JDK&#x3001;&#x5BB9;&#x5668;&#x6216;&#x4F7F;&#x7528;&#x8005;&#x4F1A;&#x63D0;&#x4F9B;&#x8FD9;&#x4E2A;&#x4F9D;&#x8D56;&#x3002;&#x5982;servlet.jar&#x3002; runtime&#xFF0C;&#x53EA;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4F7F;&#x7528;&#xFF0C;&#x5982;JDBC&#x9A71;&#x52A8;&#xFF0C;&#x9002;&#x7528;&#x8FD0;&#x884C;&#x548C;&#x6D4B;&#x8BD5;&#x9636;&#x6BB5;&#x3002; test&#xFF0C;&#x53EA;&#x5728;&#x6D4B;&#x8BD5;&#x65F6;&#x4F7F;&#x7528;&#xFF0C;&#x7528;&#x4E8E;&#x7F16;&#x8BD1;&#x548C;&#x8FD0;&#x884C;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x3002;&#x4E0D;&#x4F1A;&#x968F;&#x9879;&#x76EE;&#x53D1;&#x5E03;&#x3002; system&#xFF0C;&#x7C7B;&#x4F3C;provided&#xFF0C;&#x9700;&#x8981;&#x663E;&#x5F0F;&#x63D0;&#x4F9B;&#x5305;&#x542B;&#x4F9D;&#x8D56;&#x7684;jar&#xFF0C;Maven&#x4E0D;&#x4F1A;&#x5728;Repository&#x4E2D;&#x67E5;&#x627E;&#x5B83;&#x3002; war&#x5305;&#x8D44;&#x6E90;&#x8DEF;&#x5F84;&#x548C;&#x4E2D;&#x6587;&#x7F16;&#x7801;1234567891011&lt;build&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;configuration&gt; &lt;resourceEncoding&gt;UTF-8&lt;/resourceEncoding&gt; &lt;outputDirectory&gt;${war.outputDirectory}&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/plugin&gt;&lt;/build&gt; &#x4E71;&#x7801;&#x95EE;&#x9898;&#x5904;&#x7406;&#x5728;pom.xml&#x4E2D;&#x7EDF;&#x4E00;&#x6307;&#x5B9A;UTF-8&#x7F16;&#x7801;&#x3002;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;build&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt; &lt;/plugin&gt; &lt;!-- &#x6307;&#x5B9A;&#x7F16;&#x8BD1;&#x65F6;java&#x6E90;&#x6587;&#x4EF6;&#x7F16;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x6307;&#x5B9A;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7F16;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.1&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x89E3;&#x51B3;maven test&#x547D;&#x4EE4;&#x65F6;console&#x51FA;&#x73B0;&#x4E2D;&#x6587;&#x4E71;&#x7801;&#x4E71;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19.1&lt;/version&gt; &lt;configuration&gt; &lt;argLine&gt;-Dfile.encoding=UTF-8&lt;/argLine&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;forkMode&gt;never&lt;/forkMode&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- &#x6307;&#x5B9A;web&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7F16;&#x7801; --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;configuration&gt; &lt;resourceEncoding&gt;UTF-8&lt;/resourceEncoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt;&lt;/build&gt; &#x6DFB;&#x52A0;&#x963F;&#x91CC;&#x5DF4;&#x5DF4;maven&#x955C;&#x50CF;&#x7B2C;&#x4E00;&#x79CD;&#x529E;&#x6CD5;&#xFF0C;&#x5728;setting.xml&#x4E2D;&#x914D;&#x7F6E;&#xFF0C;&#x5168;&#x5C40;&#x6709;&#x6548;&#xFF0C;&#x914D;&#x7F6E;&#x5982;&#x4E0B;&#xFF1A;12345678&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; &#x7B2C;&#x4E8C;&#x79CD;&#x529E;&#x6CD5;&#xFF0C;&#x5728;pom.xml&#x4E2D;&#x914D;&#x7F6E;&#xFF0C;&#x5F53;&#x524D;&#x9879;&#x76EE;&#x6709;&#x6548;&#xFF0C;&#x914D;&#x7F6E;&#x5982;&#x4E0B;&#xFF1A;1234567&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/repository&gt;&lt;/repositories&gt;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://yyhan.github.io/tags/maven/"},{"name":"pom","slug":"pom","permalink":"https://yyhan.github.io/tags/pom/"}]},{"title":"java操作mongodb示例","slug":"java操作mongodb示例","date":"2016-12-11T14:57:48.000Z","updated":"2016-12-12T11:57:17.379Z","comments":true,"path":"2016/12/11/java操作mongodb示例/","link":"","permalink":"https://yyhan.github.io/2016/12/11/java操作mongodb示例/","excerpt":"java操作mongodb基本实现。","text":"java&#x64CD;&#x4F5C;mongodb&#x57FA;&#x672C;&#x5B9E;&#x73B0;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697package com.demo.utils.db;import com.mongodb.Block;import com.mongodb.MongoClient;import com.mongodb.MongoClientURI;import com.mongodb.ReadPreference;import com.mongodb.bulk.BulkWriteResult;import com.mongodb.client.*;import com.mongodb.client.model.*;import org.apache.commons.lang3.StringUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.bson.Document;import org.bson.conversions.Bson;import org.bson.types.ObjectId;import org.joda.time.DateTime;import java.util.ArrayList;import java.util.List;public class MongoHelper { private Logger logger = LogManager.getLogger(this); public final static String AUTO_ID = &quot;_id&quot;; public final static String UpdateDate = &quot;_UpdateDate&quot;; public final static int MaxSize = 1000; private String hosts; private String databaseName; private MongoClient masterClusterClient; private MongoDatabase masterClusterDB; private MongoClient readClusterClient; private MongoDatabase readClusterDB; public MongoHelper(String hosts, String databaseName) { this.hosts = hosts; this.databaseName = databaseName; masterClusterClient = new MongoClient(new MongoClientURI(this.hosts)); masterClusterClient.setReadPreference(ReadPreference.secondaryPreferred()); masterClusterDB = masterClusterClient.getDatabase(this.databaseName); this.readClusterClient = this.masterClusterClient; this.readClusterDB = this.masterClusterDB; } public MongoHelper(String masterClusterHosts, String masterClusterDatabaseName, String readClusterHosts, String readClusterDatabaseName) { if (StringUtils.isEmpty(masterClusterHosts)) { throw new IllegalArgumentException(&quot;the &apos;masterClusterHosts&apos; is null or empty&quot;); } if (StringUtils.isEmpty(masterClusterDatabaseName)) { throw new IllegalArgumentException(&quot;the &apos;masterClusterDatabaseName&apos; is null or empty&quot;); } if (logger.isDebugEnabled()) { logger.debug(&quot;masterClusterHosts:{}&quot;, masterClusterHosts); logger.debug(&quot;masterClusterDatabaseName:{}&quot;, masterClusterDatabaseName); } masterClusterClient = new MongoClient(new MongoClientURI(masterClusterHosts)); masterClusterClient.setReadPreference(ReadPreference.secondaryPreferred()); masterClusterDB = masterClusterClient.getDatabase(masterClusterDatabaseName); if (StringUtils.isEmpty(readClusterHosts) || StringUtils.isEmpty(readClusterDatabaseName)) { this.readClusterClient = this.masterClusterClient; this.readClusterDB = this.masterClusterDB; } else { if (logger.isDebugEnabled()) { logger.debug(&quot;readClusterHosts:{}&quot;, readClusterHosts); logger.debug(&quot;readClusterDatabaseName:{}&quot;, readClusterDatabaseName); } if (masterClusterHosts.equals(readClusterHosts) &amp;&amp; masterClusterDatabaseName.equals(readClusterDatabaseName)) { this.readClusterClient = this.masterClusterClient; this.readClusterDB = this.masterClusterDB; } else { readClusterClient = new MongoClient(new MongoClientURI(readClusterHosts)); readClusterDB = readClusterClient.getDatabase(readClusterDatabaseName); } } } /** * &#x6267;&#x884C;mongo&#x547D;&#x4EE4; * * @param document * @return */ public Document runCommand(Document document) { if (document == null || document.isEmpty()) { throw new IllegalArgumentException(&quot;the &apos;document&apos; can not be null or empty&quot;); } if (document.containsKey(&quot;insert&quot;) || document.containsKey(&quot;update&quot;) || document.containsKey(&quot;delete&quot;)) { return this.masterClusterDB.runCommand(document, ReadPreference.primary()); } else { return this.readClusterDB.runCommand(document, ReadPreference.secondaryPreferred()); } } /** * &#x83B7;&#x53D6;&#x6570;&#x636E;&#x5E93;&#x540D;&#x79F0;&#x5217;&#x8868; * * @return &#x6240;&#x6709;&#x6570;&#x636E;&#x5E93;&#x540D;&#x79F0;&#x5217;&#x8868; &#x9700;&#x8981;&#x6743;&#x9650; */ public List&lt;String&gt; getAllDBNames() { MongoIterable&lt;String&gt; dbnames = masterClusterClient.listDatabaseNames(); if (dbnames == null) { return new ArrayList&lt;String&gt;(); } List&lt;String&gt; _list = new ArrayList&lt;String&gt;(); for (String s : dbnames) { _list.add(s); } return _list; } /** * &#x83B7;&#x53D6;mongo&#x96C6;&#x7FA4;DB&#x5B9E;&#x4F8B; * * @return */ public MongoDatabase getDB() { return getDB(databaseName, false); } /** * &#x83B7;&#x53D6;mongo&#x96C6;&#x7FA4;DB&#x5B9E;&#x4F8B; * * @param dbName &#x6570;&#x636E;&#x5E93;&#x540D;&#x5927;&#x5C0F;&#x5199; * @param isRead &#x662F;&#x5426;&#x8BFB;&#x5E93; * @return */ public MongoDatabase getDB(String dbName, Boolean isRead) { if (dbName != null &amp;&amp; !&quot;&quot;.equals(dbName)) { MongoDatabase database = isRead ? masterClusterClient.getDatabase(dbName) : masterClusterClient.getDatabase(dbName); return database; } return null; } /** * @return &#x67E5;&#x8BE2;&#x9ED8;&#x8BA4;DB&#x4E0B;&#x7684;&#x6240;&#x6709;&#x96C6;&#x5408; */ public List&lt;String&gt; getAllCollectionNames() { MongoIterable&lt;String&gt; colls = masterClusterDB.listCollectionNames(); if (colls == null) { return new ArrayList&lt;String&gt;(); } List&lt;String&gt; _list = new ArrayList&lt;String&gt;(); for (String s : colls) { _list.add(s); } return _list; } /** * &#x67E5;&#x8BE2;&#x6307;&#x5B9A;DB&#x4E0B;&#x7684;&#x6240;&#x6709;&#x96C6;&#x5408; * * @param dbName &#x6307;&#x5B9A;DB * @return &#x6307;&#x5B9A;DB&#x4E0B;&#x7684;&#x6240;&#x6709;&#x96C6;&#x5408;&#x540D;&#x79F0; */ public List&lt;String&gt; getAllCollectionNames(String dbName) { MongoDatabase db = masterClusterClient.getDatabase(dbName); if (db == null) { return new ArrayList&lt;String&gt;(); } MongoIterable&lt;String&gt; colls = db.listCollectionNames(); if (colls == null) { return new ArrayList&lt;String&gt;(); } List&lt;String&gt; _list = new ArrayList&lt;String&gt;(); for (String s : colls) { _list.add(s); } return _list; } /** * &#x4ECE;&#x9ED8;&#x8BA4;&#x8BFB;&#x5E93;&#x83B7;&#x53D6;collection&#x96C6;&#x5408;&#x5BF9;&#x8C61; * * @param collName &#x96C6;&#x5408;&#x540D;&#x5B57;&#x5927;&#x5C0F;&#x5199; * @return &#x96C6;&#x5408;&#x5BF9;&#x8C61; */ private MongoCollection&lt;Document&gt; getCollection(String collName) { return getCollection(collName, ReadPreference.secondaryPreferred()); } /** * &#x83B7;&#x53D6;Mongodb&#x96C6;&#x5408; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param readPreference &#x8BFB;&#x64CD;&#x4F5C;&#x4F18;&#x5148;&#x987A;&#x5E8F; * @return */ private MongoCollection&lt;Document&gt; getCollection(String collName, ReadPreference readPreference) { if (StringUtils.isEmpty(collName)) { throw new IllegalArgumentException(&quot;the &apos;collName&apos; is null or empty&quot;); } MongoCollection&lt;Document&gt; collection = this.masterClusterDB.getCollection(collName).withReadPreference(readPreference); return collection; } /** * &#x83B7;&#x53D6;&#x7528;&#x4E8E;&#x8BFB;&#x7684;&#x96C6;&#x5408;&#x3002;readClusterDB * * @param collName * @return */ private MongoCollection&lt;Document&gt; getCollectionOfRead(String collName) { if (StringUtils.isEmpty(collName)) { throw new IllegalArgumentException(&quot;the &apos;collName&apos; is null or empty&quot;); } MongoCollection&lt;Document&gt; collection = this.readClusterDB.getCollection(collName); return collection; } /** * &#x83B7;&#x53D6;&#x7528;&#x4E8E;&#x5199;&#x7684;&#x96C6;&#x5408;&#x3002;ReadPreference.primary * * @param collName * @return */ private MongoCollection&lt;Document&gt; getCollectionOfWrite(String collName) { if (StringUtils.isEmpty(collName)) { throw new IllegalArgumentException(&quot;the &apos;collName&apos; is null or empty&quot;); } MongoCollection&lt;Document&gt; collection = this.masterClusterDB.getCollection(collName).withReadPreference(ReadPreference.primary()); return collection; } /** * &#x4ECE;&#x9ED8;&#x8BA4;&#x8BFB;&#x5E93;&#x83B7;&#x53D6;collection&#x96C6;&#x5408;&#x5BF9;&#x8C61; * * @param collName &#x96C6;&#x5408;&#x540D;&#x5B57;&#x5927;&#x5C0F;&#x5199; * @return &#x96C6;&#x5408;&#x5BF9;&#x8C61; */ public List&lt;Document&gt; getDocuments(String collName, Document condition) { final List&lt;Document&gt; docs = new ArrayList&lt;&gt;(); if (StringUtils.isEmpty(collName)) { return docs; } FindIterable&lt;Document&gt; iterable = this.getCollectionOfRead(collName).find(condition); iterable.forEach(new Block&lt;Document&gt;() { @Override public void apply(final Document doc) { docs.add(doc); } }); return docs; } /** * &#x5411;&#x6307;&#x5B9A;&#x96C6;&#x5408;&#x4E2D;&#x63D2;&#x5165;&#x4E00;&#x6761;&#x6570;&#x636E; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param doc &#x8981;&#x63D2;&#x5165;&#x7684;&#x6570;&#x636E; * @return &#x662F;&#x5426;&#x63D2;&#x5165;&#x6210;&#x529F; */ public String insertOne(String collName, Document doc) { MongoCollection&lt;Document&gt; collection = this.getCollectionOfWrite(collName); if (collection == null) { return null; } doc.append(UpdateDate, DateTime.now().toString(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)); collection.insertOne(doc); if (doc.containsKey(MongoHelper.AUTO_ID)) { return doc.get(MongoHelper.AUTO_ID).toString(); } return null; } /** * &#x5411;&#x6307;&#x5B9A;&#x96C6;&#x5408;&#x4E2D;&#x63D2;&#x5165;&#x591A;&#x6761;&#x6570;&#x636E; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param docs &#x8981;&#x63D2;&#x5165;&#x7684;&#x6570;&#x636E;&#x96C6;&#x5408; * @return &#x63D2;&#x5165;&#x662F;&#x5426;&#x6210;&#x529F; */ public boolean insertMany(String collName, List&lt;Document&gt; docs) { MongoCollection&lt;Document&gt; collection = this.getCollectionOfWrite(collName); if (collection == null) { return false; } String dateStr = DateTime.now().toString(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;); for (Document doc : docs) { doc.append(UpdateDate, dateStr); } collection.insertMany(docs); return true; } /** * &#x67E5;&#x8BE2;&#x96C6;&#x5408;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @return &#x8FD4;&#x56DE;&#x7B2C;&#x4E00;&#x4E2A;&#x6587;&#x6863; */ public Document findOne(String collName) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll.find().limit(1); if (iterable == null) { return null; } return iterable.first(); } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863; * * @param collName * @param filter * @return */ public Document findOne(String collName, Bson filter) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll.find(filter).limit(1); if (iterable == null) { return null; } return iterable.first(); } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param fields &#x8F93;&#x51FA;&#x5B57;&#x6BB5; * @return */ public Document findOne(String collName, Bson filter, String... fields) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll.find(filter).limit(1); if (iterable == null) { return null; } return iterable.projection(Projections.include(fields)).first(); } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projection &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @return */ public Document findOne(String collName, Bson filter, Bson projection) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll.find(filter).limit(1); if (iterable == null) { return null; } return iterable.projection(projection).first(); } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projections &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @param orderField &#x6392;&#x5E8F;&#x5B57;&#x6BB5; * @param ascding &#x662F;&#x5426;&#x5347;&#x5E8F; * @return */ public Document findOne(String collName, Bson filter, Bson projections, String orderField, boolean ascding) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll .find(filter) .sort(ascding ? Sorts.ascending(orderField) : Sorts.descending(orderField)) .limit(1); if (iterable == null) { return null; } return iterable.projection(projections).first(); } /** * &#x67E5;&#x8BE2;&#x6307;&#x5B9A;id&#x7684;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param id &#x6587;&#x6863;&#x4E3B;&#x952E;id * @return */ public Document findRowById(String collName, String id) { if (ObjectId.isValid(id)) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return null; } FindIterable&lt;Document&gt; iterable = coll.find(Filters.eq(&quot;_id&quot;, new ObjectId(id))).limit(1); if (iterable == null) { return null; } return iterable.first(); } else { return null; } } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863;&#x96C6;&#x5408; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projections &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @return &#x6700;&#x591A;&#x8FD4;&#x56DE; @MaxSize &#x4E2A;&#x6587;&#x6863;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x5360;&#x7528;&#x8FC7;&#x5927;&#x3002;&#x8FD4;&#x56DE;&#x7ED3;&#x679C;&#x6309;&#x7167;_id&#x5B57;&#x6BB5;&#x964D;&#x5E8F;&#x6392;&#x5217; */ public List&lt;Document&gt; findRows(String collName, Bson filter, Bson projections) { return findRows(collName, filter, projections, null, false); } /** * &#x67E5;&#x8BE2;&#x6587;&#x6863;&#x96C6;&#x5408;&#xFF0C;&#x5E76;&#x6309;&#x7167;&#x6307;&#x5B9A;&#x5B57;&#x6BB5;&#x6392;&#x5E8F; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projections &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @param orderField &#x6392;&#x5E8F;&#x5B57;&#x6BB5; * @param ascding &#x662F;&#x5426;&#x5347;&#x5E8F; * @return &#x6700;&#x591A;&#x8FD4;&#x56DE; @MaxSize &#x4E2A;&#x6587;&#x6863;&#xFF0C;&#x907F;&#x514D;&#x5185;&#x5B58;&#x5360;&#x7528;&#x8FC7;&#x5927; */ public List&lt;Document&gt; findRows(String collName, Bson filter, Bson projections, String orderField, boolean ascding) { List&lt;Document&gt; list = new ArrayList&lt;Document&gt;(); MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return list; } FindIterable&lt;Document&gt; iterable = null; if (filter == null) { iterable = coll.find(); } else { iterable = coll.find(filter); } if (iterable == null) { return list; } MongoCursor&lt;Document&gt; cursor = null; try { if (StringUtils.isEmpty(orderField)) { if (projections == null) { cursor = iterable .sort(ascding ? Sorts.ascending(&quot;_id&quot;) : Sorts.descending(&quot;_id&quot;)) .limit(MaxSize) .iterator(); } else { cursor = iterable.projection(projections) .sort(ascding ? Sorts.ascending(&quot;_id&quot;) : Sorts.descending(&quot;_id&quot;)) .limit(MaxSize) .iterator(); } } else { if (projections == null) { cursor = iterable .sort(ascding ? Sorts.ascending(orderField) : Sorts.descending(orderField)) .limit(MaxSize) .iterator(); } else { cursor = iterable.projection(projections) .sort(ascding ? Sorts.ascending(orderField) : Sorts.descending(orderField)) .limit(MaxSize) .iterator(); } } if (cursor != null &amp;&amp; cursor.hasNext()) { while (cursor.hasNext()) { list.add(cursor.next()); } } return list; } finally { if (cursor != null) cursor.close(); } } /** * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @return */ public long getRowsCount(String collName, Bson filter) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return 0; } if (filter == null) { return coll.count(); } return coll.count(filter); } /** * &#x67E5;&#x8BE2;&#x5206;&#x9875;&#x6587;&#x6863;&#x96C6;&#x5408;,&#x6309;&#x7167;_id&#x5B57;&#x6BB5;&#x964D;&#x5E8F;&#x6392;&#x5217; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projections &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @param pageNo &#x5F53;&#x524D;&#x9875;&#x7F16;&#x53F7;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB; * @param pageSize &#x6BCF;&#x9875;&#x5BB9;&#x91CF; * @return * @throws Exception */ public List&lt;Document&gt; findPagedRows(String collName, Bson filter, Bson projections, int pageNo, int pageSize) { return findPagedRows(collName, filter, projections, null, false, pageNo, pageSize); } /** * &#x67E5;&#x8BE2;&#x5206;&#x9875;&#x6587;&#x6863;&#x96C6;&#x5408;,&#x9ED8;&#x8BA4;&#x6309;&#x7167;_id&#x5B57;&#x6BB5;&#x6392;&#x5E8F; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param projections &#x5B57;&#x6BB5;&#x6295;&#x5F71; * @param orderField &#x6392;&#x5E8F;&#x5B57;&#x6BB5; * @param ascding &#x662F;&#x5426;&#x5347;&#x5E8F; * @param pageNo &#x5F53;&#x524D;&#x9875;&#x7F16;&#x53F7;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB; * @param pageSize &#x6BCF;&#x9875;&#x5BB9;&#x91CF; * @return */ public List&lt;Document&gt; findPagedRows(String collName, Bson filter, Bson projections, String orderField, boolean ascding, int pageNo, int pageSize) { List&lt;Document&gt; list = new ArrayList&lt;Document&gt;(pageSize); MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); if (coll == null) { return list; } FindIterable&lt;Document&gt; iterable = null; if (filter == null) { iterable = coll.find(); } else { iterable = coll.find(filter); } if (iterable == null) { return list; } MongoCursor&lt;Document&gt; cursor = null; try { if (StringUtils.isEmpty(orderField)) { cursor = iterable.projection(projections) .sort(ascding ? Sorts.ascending(&quot;_id&quot;) : Sorts.descending(&quot;_id&quot;)) .skip((pageNo - 1) * pageSize) .limit(pageSize) .iterator(); } else { cursor = iterable.projection(projections) .sort(Sorts.ascending(orderField)) .sort(ascding ? Sorts.ascending(orderField) : Sorts.descending(orderField)) .skip((pageNo - 1) * pageSize) .limit(pageSize) .iterator(); } if (cursor != null &amp;&amp; cursor.hasNext()) { while (cursor.hasNext()) { list.add(cursor.next()); } } return list; } finally { if (cursor != null) cursor.close(); } } /** * &#x6839;&#x636E;&#x4E3B;&#x952E;id&#x5220;&#x9664;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param id &#x6587;&#x6863;id * @return &#x88AB;&#x5220;&#x9664;&#x7684;&#x6587;&#x6863;&#x6570;&#x91CF; */ public long deleteById(String collName, String id) { if (ObjectId.isValid(id)) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfWrite(collName); if (coll == null) { return 0; } return coll.deleteOne(Filters.eq(&quot;_id&quot;, new ObjectId(id))) .getDeletedCount(); } else { return 0; } } /** * &#x6839;&#x636E;&#x6307;&#x5B9A;filter&#x5220;&#x9664;&#x6587;&#x6863; * * @param collName * @param filter * @return &#x88AB;&#x5220;&#x9664;&#x6587;&#x6863;&#x7684;&#x6570;&#x91CF; */ public long delete(String collName, Bson filter) { if (filter == null) { return 0; } else { MongoCollection&lt;Document&gt; coll = this.getCollectionOfWrite(collName); if (coll == null) { return 0; } return coll.deleteOne(filter) .getDeletedCount(); } } /** * &#x66F4;&#x65B0;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param update &#x66F4;&#x65B0;&#x8BED;&#x53E5; * @return &#x66F4;&#x65B0;&#x7684;&#x6587;&#x6863;&#x6570;&#x91CF; */ public long update(String collName, Bson filter, Bson update) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfWrite(collName); if (coll == null) { return 0; } return coll.updateOne(filter, Updates.combine( update, Updates.set(UpdateDate, DateTime.now().toString(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;))) ).getModifiedCount(); } /** * &#x66F4;&#x65B0;&#x6587;&#x6863; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param updates &#x66F4;&#x65B0;&#x8BED;&#x53E5; * @return &#x66F4;&#x65B0;&#x7684;&#x6587;&#x6863;&#x6570;&#x91CF; */ public long updateMany(String collName, List&lt;WriteModel&lt;Document&gt;&gt; updates) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfWrite(collName); if (coll == null || updates == null || updates.size() == 0) { return 0; } BulkWriteResult bulkWriteResult = coll.bulkWrite(updates); return bulkWriteResult.getModifiedCount(); } /** * &#x66F4;&#x65B0;&#x6587;&#x6863;&#xFF0C;&#x6307;&#x5B9A;&#x6587;&#x6863;&#x5B58;&#x5728;&#x5219;&#x66F4;&#x65B0;&#xFF0C;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x63D2;&#x5165; * * @param collName &#x96C6;&#x5408;&#x540D;&#x79F0; * @param filter &#x8FC7;&#x6EE4;&#x6761;&#x4EF6; * @param update &#x66F4;&#x65B0;&#x8BED;&#x53E5; * @return &#x66F4;&#x65B0;&#x7684;&#x6587;&#x6863;&#x6570;&#x91CF; */ public long upsert(String collName, Bson filter, Bson update) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfWrite(collName); if (coll == null) { return 0; } ; return coll.updateOne(filter, Updates.combine( update, Updates.set(UpdateDate, DateTime.now().toString(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)) ), new UpdateOptions().upsert(true) ).getModifiedCount(); } public List&lt;Document&gt; aggregate(String collName, List&lt;Bson&gt; pipelines) { MongoCollection&lt;Document&gt; coll = this.getCollectionOfRead(collName); MongoCursor&lt;Document&gt; cursor = null; List&lt;Document&gt; documents = new ArrayList&lt;&gt;(); try { cursor = coll.aggregate(pipelines).iterator(); if (cursor != null &amp;&amp; cursor.hasNext()) { while (cursor.hasNext()) { documents.add(cursor.next()); } } return documents; } finally { if (cursor != null) cursor.close(); } }}","categories":[{"name":"代码示例","slug":"代码示例","permalink":"https://yyhan.github.io/categories/代码示例/"}],"tags":[{"name":"java","slug":"java","permalink":"https://yyhan.github.io/tags/java/"},{"name":"mongodb","slug":"mongodb","permalink":"https://yyhan.github.io/tags/mongodb/"}]},{"title":"npm入门指南","slug":"npm入门指南","date":"2016-12-11T14:50:40.000Z","updated":"2016-12-12T05:10:04.736Z","comments":true,"path":"2016/12/11/npm入门指南/","link":"","permalink":"https://yyhan.github.io/2016/12/11/npm入门指南/","excerpt":"","text":"NPM&#x662F;&#x968F;&#x540C;NodeJS&#x4E00;&#x8D77;&#x5B89;&#x88C5;&#x7684;&#x5305;&#x7BA1;&#x7406;&#x5DE5;&#x5177;&#xFF0C;&#x80FD;&#x89E3;&#x51B3;NodeJS&#x4EE3;&#x7801;&#x90E8;&#x7F72;&#x4E0A;&#x7684;&#x5F88;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x5E38;&#x89C1;&#x7684;&#x4F7F;&#x7528;&#x573A;&#x666F;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#xFF1A; &#x5141;&#x8BB8;&#x7528;&#x6237;&#x4ECE;NPM&#x670D;&#x52A1;&#x5668;&#x4E0B;&#x8F7D;&#x522B;&#x4EBA;&#x7F16;&#x5199;&#x7684;&#x7B2C;&#x4E09;&#x65B9;&#x5305;&#x5230;&#x672C;&#x5730;&#x4F7F;&#x7528;&#x3002; &#x5141;&#x8BB8;&#x7528;&#x6237;&#x4ECE;NPM&#x670D;&#x52A1;&#x5668;&#x4E0B;&#x8F7D;&#x5E76;&#x5B89;&#x88C5;&#x522B;&#x4EBA;&#x7F16;&#x5199;&#x7684;&#x547D;&#x4EE4;&#x884C;&#x7A0B;&#x5E8F;&#x5230;&#x672C;&#x5730;&#x4F7F;&#x7528;&#x3002; &#x5141;&#x8BB8;&#x7528;&#x6237;&#x5C06;&#x81EA;&#x5DF1;&#x7F16;&#x5199;&#x7684;&#x5305;&#x6216;&#x547D;&#x4EE4;&#x884C;&#x7A0B;&#x5E8F;&#x4E0A;&#x4F20;&#x5230;NPM&#x670D;&#x52A1;&#x5668;&#x4F9B;&#x522B;&#x4EBA;&#x4F7F;&#x7528;&#x3002; &#x7531;&#x4E8E;&#x65B0;&#x7248;&#x7684;nodejs&#x5DF2;&#x7ECF;&#x96C6;&#x6210;&#x4E86;npm&#xFF0C;&#x6240;&#x4EE5;&#x4E4B;&#x524D;npm&#x4E5F;&#x4E00;&#x5E76;&#x5B89;&#x88C5;&#x597D;&#x4E86;&#x3002;&#x540C;&#x6837;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8F93;&#x5165; &#x201C;npm -v&#x201D; &#x6765;&#x6D4B;&#x8BD5;&#x662F;&#x5426;&#x6210;&#x529F;&#x5B89;&#x88C5;&#x3002;&#x547D;&#x4EE4;&#x5982;&#x4E0B;&#xFF0C;&#x51FA;&#x73B0;&#x7248;&#x672C;&#x63D0;&#x793A;&#x8868;&#x793A;&#x5B89;&#x88C5;&#x6210;&#x529F;:12$ npm -v3.10.8 npm &#x5B98;&#x7F51; npm &#x6587;&#x6863; &#x4F7F;&#x7528;package.jsonpackage.json&#x6587;&#x4EF6;&#x793A;&#x4F8B;&#xFF1A;1234567891011121314151617181920212223{ &quot;name&quot;: &quot;demo&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;demo&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;dev&quot;: &quot;node build/dev-server.js&quot; }, &quot;repository&quot;: { &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;https://github.com/yyhan/demo.git&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;bugs&quot;: { &quot;url&quot;: &quot;https://github.com/yyhan/demo/issues&quot; }, &quot;homepage&quot;: &quot;https://github.com/yyhan/demo#readme&quot;, &quot;devDependencies&quot;: { &quot;express&quot;: &quot;^4.14.0&quot;, &quot;opn&quot;: &quot;^4.0.2&quot; }} &#x5E38;&#x7528;&#x547D;&#x4EE4;npm init &#x521D;&#x59CB;&#x5316;package.json&#x6587;&#x4EF6; npm install &lt;package_name&gt; &#x5B89;&#x88C5;&#x4F9D;&#x8D56;&#x5230;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#xFF0C;&#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x5728;package.json&#x91CC;&#x914D;&#x7F6E;&#x597D;&#x4E86;&#x4E00;&#x5207;&#x4F9D;&#x8D56;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8FD0;&#x884C;npm install&#xFF0C;npm&#x4F1A;&#x81EA;&#x52A8;&#x5B89;&#x88C5;package.json&#x91CC;&#x6307;&#x5B9A;&#x7684;&#x4F9D;&#x8D56; npm install &lt;package_name&gt; -g &#x5B89;&#x88C5;&#x4F9D;&#x8D56;&#x5230;&#x5168;&#x5C40;&#x73AF;&#x5883;&#xFF0C;&#x4E00;&#x822C;&#x7528;&#x4E8E;&#x4E00;&#x4E9B;js&#x5DE5;&#x5177;&#x6216;&#x547D;&#x4EE4;&#x7C7B;&#x7684;&#x5B89;&#x88C5;&#x5305; npm install &lt;package_name&gt; --save &#x5B89;&#x88C5;&#x4F9D;&#x8D56;&#x5230;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x5C06;&#x8BE5;&#x4F9D;&#x8D56;&#x6DFB;&#x52A0;&#x5230;package.json &#x6587;&#x4EF6;&#x7684;&#x4F9D;&#x8D56;(dependencies)&#x9879;&#x4E2D; npm install &lt;package_name&gt; --save-dev &#x5B89;&#x88C5;&#x4F9D;&#x8D56;&#x5230;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x5C06;&#x8BE5;&#x4F9D;&#x8D56;&#x6DFB;&#x52A0;&#x5230;package.json &#x6587;&#x4EF6;&#x7684;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#x4F9D;&#x8D56;(devDependencies)&#x9879;&#x4E2D; npm uninstall &lt;package_name&gt; &#x79FB;&#x9664;&#x4F9D;&#x8D56; npm&#x955C;&#x50CF;&#x6DD8;&#x5B9D;npm&#x955C;&#x50CF;&#x5730;&#x5740;&#xFF1A;https://npm.taobao.org/1$ npm install -g cnpm --registry=https://registry.npm.taobao.org &#x6216;&#x8005;&#x901A;&#x8FC7;&#x76F4;&#x63A5;&#x6DFB;&#x52A0;npm&#x53C2;&#x6570;alias&#x4E00;&#x4E2A;&#x65B0;&#x547D;&#x4EE4;&#xFF1A;12345678910alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\--cache=$HOME/.npm/.cache/cnpm \\--disturl=https://npm.taobao.org/dist \\--userconfig=$HOME/.cnpmrc&quot;# Or alias it in .bashrc or .zshrc$ echo &apos;\\n#alias for cnpm\\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\ --cache=$HOME/.npm/.cache/cnpm \\ --disturl=https://npm.taobao.org/dist \\ --userconfig=$HOME/.cnpmrc&quot;&apos; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc &#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;cnpm&#x6765;&#x4EE3;&#x66FF;npm&#x9664;&#x4E86;publish&#x4E4B;&#x5916;&#x7684;&#x6240;&#x6709;&#x64CD;&#x4F5C;&#xFF1A;1$ cnpm install [pk_name] &#x901A;&#x8FC7;cnpm&#x63D0;&#x4F9B;&#x7684;sync&#x547D;&#x4EE4;&#x540C;&#x6B65;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF1A;1$ cnpm sync [pk_name]","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://yyhan.github.io/categories/工具使用/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://yyhan.github.io/tags/npm/"},{"name":"入门指南","slug":"入门指南","permalink":"https://yyhan.github.io/tags/入门指南/"}]}]}